














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class Now : ReqlExpr {

    
    
    
/// <summary>
/// <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
/// </summary>
/// <example><para>Example: Add a new user with the time at which he subscribed.</para>
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
        public Now (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
/// </summary>
/// <example><para>Example: Add a new user with the time at which he subscribed.</para>
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
        public Now (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
/// </summary>
/// <example><para>Example: Add a new user with the time at which he subscribed.</para>
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
        public Now (Arguments args, OptArgs optargs)
         : base(TermType.NOW, args, optargs) {
        }


    



    


    

    
        /// <summary>
        /// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        /// </summary>
        /// <param name="bracket"></param>
        public new Bracket this[string bracket] => base[bracket];
        
        /// <summary>
        /// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        /// </summary>
        /// <param name="bracket"></param>
        /// <returns></returns>
        public new Bracket this[int bracket] => base[bracket];


    

    


    
    }
}
