














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class Literal : ReqlExpr {

    
    
    
/// <summary>
/// <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
/// </summary>
/// <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
/// <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
/// 
/// // Result passed to callback
/// {
///     "id": 1,
///     "name": "Alice",
///     "data": {
///         "age": 19,
///         "job": "Engineer"
///     }
/// }
/// </code></example>
        public Literal (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
/// </summary>
/// <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
/// <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
/// 
/// // Result passed to callback
/// {
///     "id": 1,
///     "name": "Alice",
///     "data": {
///         "age": 19,
///         "job": "Engineer"
///     }
/// }
/// </code></example>
        public Literal (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
/// </summary>
/// <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
/// <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
/// 
/// // Result passed to callback
/// {
///     "id": 1,
///     "name": "Alice",
///     "data": {
///         "age": 19,
///         "job": "Engineer"
///     }
/// }
/// </code></example>
        public Literal (Arguments args, OptArgs optargs)
         : base(TermType.LITERAL, args, optargs) {
        }


    



    


    

    
        /// <summary>
        /// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        /// </summary>
        /// <param name="bracket"></param>
        public new Bracket this[string bracket] => base[bracket];
        
        /// <summary>
        /// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        /// </summary>
        /// <param name="bracket"></param>
        /// <returns></returns>
        public new Bracket this[int bracket] => base[bracket];


    

    


    
    }
}
