














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class TimeOfDay : ReqlExpr {

    
    
    
/// <summary>
/// <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
/// </summary>
/// <example><para>Example: Retrieve posts that were submitted before noon.</para>
/// <code>r.table("posts").filter(
///     r.row("date").timeOfDay().le(12*60*60)
/// ).run(conn, callback)
/// </code></example>
        public TimeOfDay (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
/// </summary>
/// <example><para>Example: Retrieve posts that were submitted before noon.</para>
/// <code>r.table("posts").filter(
///     r.row("date").timeOfDay().le(12*60*60)
/// ).run(conn, callback)
/// </code></example>
        public TimeOfDay (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
/// </summary>
/// <example><para>Example: Retrieve posts that were submitted before noon.</para>
/// <code>r.table("posts").filter(
///     r.row("date").timeOfDay().le(12*60*60)
/// ).run(conn, callback)
/// </code></example>
        public TimeOfDay (Arguments args, OptArgs optargs)
         : base(TermType.TIME_OF_DAY, args, optargs) {
        }


    



    


    

    
        /// <summary>
        /// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        /// </summary>
        /// <param name="bracket"></param>
        public new Bracket this[string bracket] => base[bracket];
        
        /// <summary>
        /// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        /// </summary>
        /// <param name="bracket"></param>
        /// <returns></returns>
        public new Bracket this[int bracket] => base[bracket];


    

    


    
    }
}
