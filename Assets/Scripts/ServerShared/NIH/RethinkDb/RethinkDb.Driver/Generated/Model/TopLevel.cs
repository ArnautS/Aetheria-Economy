








//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using System.Linq;
using System.Collections;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Ast;

namespace RethinkDb.Driver.Ast {
    public partial class TopLevel {

        public ReqlExpr Expr(Object value){
            return Util.ToReqlExpr(value);

        }
        internal ReqlExpr expr(Object value){
            return Expr(value);
        }


        public ReqlExpr Row(params object[] values) {
            throw new ReqlDriverError("r.row is not implemented in the C# driver. Use lambda syntax instead.");
        }
        internal ReqlExpr row(params object[] values) {
            return Row(values);
        }

        public MapObject HashMap(object key, object val) {
            return new MapObject().With(key, val);
        }
        internal MapObject hashMap(object key, object val) {
            return new MapObject().With(key, val);
        }

        public MapObject HashMap()
        {
            return new MapObject();
        }
        internal MapObject hashMap()
        {
            return HashMap();
        }


        public IList Array(params object[] values){
            return values.ToList();
        }
        internal IList array(params object[] values){
            return Array(values);
        }

                            public Javascript Js ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Javascript (arguments);
                            }
                            internal Javascript js ( Object expr )
                            {
                               return Js ( expr );
                            }
/// <summary>
/// <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code>uuid</code> as an argument, the UUID will be deterministic, derived from the string's SHA-1 hash.</para>
///</summary>
/// <example><para>Example: Generate a UUID.</para>
/// <code>&gt; r.uuid().run(conn, callback)
/// // result returned to callback
/// "27961a0e-f4e8-4eb3-bf95-c5203e1d87b9"
/// </code></example>
                            public Uuid Uuid (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Uuid (arguments);
                            }
                            internal Uuid uuid (  )
                            {
                               return Uuid (  );
                            }
/// <summary>
/// <para>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code>uuid</code> as an argument, the UUID will be deterministic, derived from the string's SHA-1 hash.</para>
///</summary>
/// <example><para>Example: Generate a UUID.</para>
/// <code>&gt; r.uuid().run(conn, callback)
/// // result returned to callback
/// "27961a0e-f4e8-4eb3-bf95-c5203e1d87b9"
/// </code></example>
                            public Uuid Uuid ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Uuid (arguments);
                            }
                            internal Uuid uuid ( Object expr )
                            {
                               return Uuid ( expr );
                            }
/// <summary>
/// <para>Retrieve data from the specified URL over HTTP.  The return type depends on the <code>resultFormat</code> option, which checks the <code>Content-Type</code> of the response by default.</para>
///</summary>
/// <example><para>Example: Perform an HTTP <code>GET</code> and store the result in a table.</para>
/// <code>r.table('posts').insert(r.http('http://httpbin.org/get')).run(conn, callback)
/// </code></example>
                            public Http Http ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Http (arguments);
                            }
                            internal Http http ( Object expr )
                            {
                               return Http ( expr );
                            }
/// <summary>
/// <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
///</summary>
/// <example><para>Example: Iron Man can't possibly have lost a battle:</para>
/// <code>r.table('marvel').get('IronMan').do(function(ironman) {
///     return r.branch(ironman('victories').lt(ironman('battles')),
///         r.error('impossible code path'),
///         ironman)
/// }).run(conn, callback)
/// </code></example>
                            public Error Error (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Error (arguments);
                            }
                            internal Error error (  )
                            {
                               return Error (  );
                            }
/// <summary>
/// <para>Throw a runtime error. If called with no arguments inside the second argument to <code>default</code>, re-throw the current error.</para>
///</summary>
/// <example><para>Example: Iron Man can't possibly have lost a battle:</para>
/// <code>r.table('marvel').get('IronMan').do(function(ironman) {
///     return r.branch(ironman('victories').lt(ironman('battles')),
///         r.error('impossible code path'),
///         ironman)
/// }).run(conn, callback)
/// </code></example>
                            public Error Error ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Error (arguments);
                            }
                            internal Error error ( Object expr )
                            {
                               return Error ( expr );
                            }
/// <summary>
/// <para>Reference a database.</para>
///</summary>
/// <example><para>Example: Explicitly specify a database for a query.</para>
/// <code>r.db('heroes').table('marvel').run(conn, callback)
/// </code></example>
                            public Db Db ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Db (arguments);
                            }
                            internal Db db ( Object expr )
                            {
                               return Db ( expr );
                            }
/// <summary>
/// <para>Return all documents in a table. Other commands may be chained after <code>table</code> to return a subset of documents (such as <a href="/api/javascript/get/">get</a> and <a href="/api/javascript/filter/">filter</a>) or perform further processing.</para>
///</summary>
/// <example><para>Example: Return all documents in the table 'marvel' of the default database.</para>
/// <code>r.table('marvel').run(conn, callback)
/// </code></example>
                            public Table Table ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Table (arguments);
                            }
                            internal Table table ( Object expr )
                            {
                               return Table ( expr );
                            }
/// <summary>
/// <para>Test if two or more values are equal.</para>
///</summary>
/// <example><para>Example: See if a user's <code>role</code> field is set to <code>administrator</code>.</para>
/// <code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);
/// </code></example>
                            public Eq Eq ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Eq (arguments);
                            }
                            internal Eq eq ( Object expr, Object exprA, params object[] exprs )
                            {
                               return Eq ( expr, exprA, exprs );
                            }
/// <summary>
/// <para>Test if two or more values are not equal.</para>
///</summary>
/// <example><para>Example: See if a user's <code>role</code> field is not set to <code>administrator</code>.</para>
/// <code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);
/// </code></example>
                            public Ne Ne ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Ne (arguments);
                            }
                            internal Ne ne ( Object expr, Object exprA, params object[] exprs )
                            {
                               return Ne ( expr, exprA, exprs );
                            }
/// <summary>
/// <para>Compare values, testing if the left-hand value is less than the right-hand.</para>
///</summary>
/// <example><para>Example: Test if a player has scored less than 10 points.</para>
/// <code>r.table('players').get(1)('score').lt(10).run(conn, callback);
/// </code></example>
                            public Lt Lt ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Lt (arguments);
                            }
                            internal Lt lt ( Object expr, Object exprA, params object[] exprs )
                            {
                               return Lt ( expr, exprA, exprs );
                            }
/// <summary>
/// <para>Compare values, testing if the left-hand value is less than or equal to the right-hand.</para>
///</summary>
/// <example><para>Example: Test if a player has scored 10 points or less.</para>
/// <code>r.table('players').get(1)('score').le(10).run(conn, callback);
/// </code></example>
                            public Le Le ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Le (arguments);
                            }
                            internal Le le ( Object expr, Object exprA, params object[] exprs )
                            {
                               return Le ( expr, exprA, exprs );
                            }
/// <summary>
/// <para>Compare values, testing if the left-hand value is greater than the right-hand.</para>
///</summary>
/// <example><para>Example: Test if a player has scored more than 10 points.</para>
/// <code>r.table('players').get(1)('score').gt(10).run(conn, callback);
/// </code></example>
                            public Gt Gt ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Gt (arguments);
                            }
                            internal Gt gt ( Object expr, Object exprA, params object[] exprs )
                            {
                               return Gt ( expr, exprA, exprs );
                            }
/// <summary>
/// <para>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</para>
///</summary>
/// <example><para>Example: Test if a player has scored 10 points or more.</para>
/// <code>r.table('players').get(1)('score').ge(10).run(conn, callback);
/// </code></example>
                            public Ge Ge ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Ge (arguments);
                            }
                            internal Ge ge ( Object expr, Object exprA, params object[] exprs )
                            {
                               return Ge ( expr, exprA, exprs );
                            }
/// <summary>
/// <para>Compute the logical inverse (not) of an expression.</para>
///</summary>
/// <example><para>Example: Not true is false.</para>
/// <code>r(true).not().run(conn, callback)
/// r.not(true).run(conn, callback)
/// </code>
/// <para>These evaluate to <code>false</code>.</para></example>
                            public Not Not ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Not (arguments);
                            }
                            internal Not not ( Object expr )
                            {
                               return Not ( expr );
                            }
/// <summary>
/// <para>Sum two or more numbers, or concatenate two or more strings or arrays.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 + 2 = 4.</para>
/// <code>&gt; r.expr(2).add(2).run(conn, callback)
/// // result passed to callback
/// 4
/// </code></example>
                            public Add Add ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Add (arguments);
                            }
                            internal Add add ( Object expr, params object[] exprs )
                            {
                               return Add ( expr, exprs );
                            }
/// <summary>
/// <para>Subtract two numbers.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 - 2 = 0.</para>
/// <code>r.expr(2).sub(2).run(conn, callback)
/// </code></example>
                            public Sub Sub ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Sub (arguments);
                            }
                            internal Sub sub ( Object expr, params object[] exprs )
                            {
                               return Sub ( expr, exprs );
                            }
/// <summary>
/// <para>Multiply two numbers, or make a periodic array.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 * 2 = 4.</para>
/// <code>r.expr(2).mul(2).run(conn, callback)
/// </code></example>
                            public Mul Mul ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Mul (arguments);
                            }
                            internal Mul mul ( Object expr, params object[] exprs )
                            {
                               return Mul ( expr, exprs );
                            }
/// <summary>
/// <para>Divide two numbers.</para>
///</summary>
/// <example><para>Example: It's as easy as 2 / 2 = 1.</para>
/// <code>r.expr(2).div(2).run(conn, callback)
/// </code></example>
                            public Div Div ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Div (arguments);
                            }
                            internal Div div ( Object expr, params object[] exprs )
                            {
                               return Div ( expr, exprs );
                            }
/// <summary>
/// 
///</summary>
/// <example><para>Example: It's as easy as 2 % 2 = 0.</para>
/// <code>r.expr(2).mod(2).run(conn, callback)
/// </code></example>
                            public Mod Mod ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Mod (arguments);
                            }
                            internal Mod mod ( Object expr, Object exprA )
                            {
                               return Mod ( expr, exprA );
                            }
/// <summary>
/// <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
///</summary>
/// <example><para>Example: Return the floor of 12.345.</para>
/// <code>r.floor(12.345).run(conn, callback);
/// // Result passed to callback
/// 12.0
/// </code>
/// <para>The <code>floor</code> command can also be chained after an expression.</para></example>
                            public Floor Floor ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Floor (arguments);
                            }
                            internal Floor floor ( Object expr )
                            {
                               return Floor ( expr );
                            }
/// <summary>
/// <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
///</summary>
/// <example><para>Example: Return the ceiling of 12.345.</para>
/// <code>r.ceil(12.345).run(conn, callback);
/// // Result passed to callback
/// 13.0
/// </code>
/// <para>The <code>ceil</code> command can also be chained after an expression.</para></example>
                            public Ceil Ceil ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Ceil (arguments);
                            }
                            internal Ceil ceil ( Object expr )
                            {
                               return Ceil ( expr );
                            }
/// <summary>
/// <para>Rounds the given value to the nearest whole integer.</para>
///</summary>
/// <example><para>Example: Round 12.345 to the nearest integer.</para>
/// <code>r.round(12.345).run(conn, callback);
/// // Result passed to callback
/// 12.0
/// </code>
/// <para>The <code>round</code> command can also be chained after an expression.</para></example>
                            public Round Round ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Round (arguments);
                            }
                            internal Round round ( Object expr )
                            {
                               return Round ( expr );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr )
                            {
                               return Contains ( expr );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js )
                            {
                               return Contains ( expr, js );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA )
                            {
                               return Contains ( expr, js, jsA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return Contains ( expr, js, jsA, jsB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(jsC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                               return Contains ( expr, js, jsA, jsB, jsC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                               return Contains ( expr, js, jsA, jsB, exprA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                               return Contains ( expr, js, jsA, exprA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                               return Contains ( expr, js, jsA, exprA, jsB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                               return Contains ( expr, js, jsA, exprA, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA )
                            {
                               return Contains ( expr, js, exprA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                               return Contains ( expr, js, exprA, jsA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                               return Contains ( expr, js, exprA, jsA, jsB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                               return Contains ( expr, js, exprA, jsA, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                               return Contains ( expr, js, exprA, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                               return Contains ( expr, js, exprA, exprB, jsA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                               return Contains ( expr, js, exprA, exprB, exprC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA )
                            {
                               return Contains ( expr, exprA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js )
                            {
                               return Contains ( expr, exprA, js );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                               return Contains ( expr, exprA, js, jsA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return Contains ( expr, exprA, js, jsA, jsB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                               return Contains ( expr, exprA, js, jsA, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                               return Contains ( expr, exprA, js, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                               return Contains ( expr, exprA, js, exprB, jsA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                               return Contains ( expr, exprA, js, exprB, exprC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB )
                            {
                               return Contains ( expr, exprA, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return Contains ( expr, exprA, exprB, js );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                               return Contains ( expr, exprA, exprB, js, jsA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                               return Contains ( expr, exprA, exprB, js, exprC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                               return Contains ( expr, exprA, exprB, exprC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(js);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                               return Contains ( expr, exprA, exprB, exprC, js );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(exprD);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                               return Contains ( expr, exprA, exprB, exprC, exprD );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                               return Contains ( expr, exprA, exprB, exprC, func1 );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                               return Contains ( expr, exprA, exprB, func1 );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                               return Contains ( expr, exprA, exprB, func1, exprC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return Contains ( expr, exprA, exprB, func1, func1A );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                               return Contains ( expr, exprA, func1 );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                               return Contains ( expr, exprA, func1, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                               return Contains ( expr, exprA, func1, exprB, exprC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                               return Contains ( expr, exprA, func1, exprB, func1A );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return Contains ( expr, exprA, func1, func1A );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                               return Contains ( expr, exprA, func1, func1A, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return Contains ( expr, exprA, func1, func1A, func1B );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1 )
                            {
                               return Contains ( expr, func1 );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                               return Contains ( expr, func1, exprA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                               return Contains ( expr, func1, exprA, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                               return Contains ( expr, func1, exprA, exprB, exprC );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                               return Contains ( expr, func1, exprA, exprB, func1A );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                               return Contains ( expr, func1, exprA, func1A );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                               return Contains ( expr, func1, exprA, func1A, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return Contains ( expr, func1, exprA, func1A, func1B );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return Contains ( expr, func1, func1A );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                               return Contains ( expr, func1, func1A, exprA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                               return Contains ( expr, func1, func1A, exprA, exprB );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                               return Contains ( expr, func1, func1A, exprA, func1B );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return Contains ( expr, func1, func1A, func1B );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(exprA);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                               return Contains ( expr, func1, func1A, func1B, exprA );
                            }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
///</summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                            public Contains Contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(func1C);
                                return new Contains (arguments);
                            }
                            internal Contains contains ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                               return Contains ( expr, func1, func1A, func1B, func1C );
                            }
/// <summary>
/// <para>Creates an object from a list of key-value pairs, where the keys must
/// be strings.  <code>r.object(A, B, C, D)</code> is equivalent to
/// <code>r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</para>
///</summary>
/// <example><para>Example: Create a simple object.</para>
/// <code>r.object('id', 5, 'data', ['foo', 'bar']).run(conn, callback)
/// </code>
/// <para>Result:</para>
/// <code>{data: ["foo", "bar"], id: 5}
/// </code></example>
                            public ReqlObject Object_ ( params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAddAll(exprs);
                                return new ReqlObject (arguments);
                            }
                            internal ReqlObject object_ ( params object[] exprs )
                            {
                               return Object_ ( exprs );
                            }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
///</summary>
/// <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1;
/// }).reduce(function(left, right) {
///     return left.add(right);
/// }).default(0).run(conn, callback);
/// </code>
/// <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
                            public Reduce Reduce ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Reduce (arguments);
                            }
                            internal Reduce reduce ( Object expr, Javascript js )
                            {
                               return Reduce ( expr, js );
                            }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
///</summary>
/// <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1;
/// }).reduce(function(left, right) {
///     return left.add(right);
/// }).default(0).run(conn, callback);
/// </code>
/// <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
                            public Reduce Reduce ( Object expr, ReqlFunction2 func2 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func2);
                                return new Reduce (arguments);
                            }
                            internal Reduce reduce ( Object expr, ReqlFunction2 func2 )
                            {
                               return Reduce ( expr, func2 );
                            }
/// <summary>
/// <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
///</summary>
/// <example><para>Example: Concatenate words from a list.</para>
/// <code>r.table('words').orderBy('id').fold('', function (acc, word) {
///     return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
/// }).run(conn, callback);
/// </code>
/// <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
                            public Fold Fold ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Fold (arguments);
                            }
                            internal Fold fold ( Object expr, Object exprA, Javascript js )
                            {
                               return Fold ( expr, exprA, js );
                            }
/// <summary>
/// <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
///</summary>
/// <example><para>Example: Concatenate words from a list.</para>
/// <code>r.table('words').orderBy('id').fold('', function (acc, word) {
///     return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
/// }).run(conn, callback);
/// </code>
/// <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
                            public Fold Fold ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func2);
                                return new Fold (arguments);
                            }
                            internal Fold fold ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                               return Fold ( expr, exprA, func2 );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, Javascript js )
                            {
                               return Map ( expr, js );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, Object exprA, Javascript js )
                            {
                               return Map ( expr, exprA, js );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return Map ( expr, exprA, exprB, js );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(js);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                               return Map ( expr, exprA, exprB, exprC, js );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(func4);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                            {
                               return Map ( expr, exprA, exprB, exprC, func4 );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func3);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                               return Map ( expr, exprA, exprB, func3 );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func2);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                               return Map ( expr, exprA, func2 );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, ReqlFunction0 func0 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func0);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, ReqlFunction0 func0 )
                            {
                               return Map ( expr, func0 );
                            }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
///</summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                            public Map Map ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Map (arguments);
                            }
                            internal Map map ( Object expr, ReqlFunction1 func1 )
                            {
                               return Map ( expr, func1 );
                            }
/// <summary>
/// <para>Removes duplicates from elements in a sequence.</para>
///</summary>
/// <example><para>Example: Which unique villains have been vanquished by Marvel heroes?</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('villainList')
/// }).distinct().run(conn, callback)
/// </code></example>
                            public Distinct Distinct ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Distinct (arguments);
                            }
                            internal Distinct distinct ( Object expr )
                            {
                               return Distinct ( expr );
                            }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
///</summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                            public Count Count ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Count (arguments);
                            }
                            internal Count count ( Object expr )
                            {
                               return Count ( expr );
                            }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
///</summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                            public Count Count ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Count (arguments);
                            }
                            internal Count count ( Object expr, Javascript js )
                            {
                               return Count ( expr, js );
                            }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
///</summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                            public Count Count ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Count (arguments);
                            }
                            internal Count count ( Object expr, Object exprA )
                            {
                               return Count ( expr, exprA );
                            }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
///</summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                            public Count Count ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Count (arguments);
                            }
                            internal Count count ( Object expr, ReqlFunction1 func1 )
                            {
                               return Count ( expr, func1 );
                            }
/// <summary>
/// <para>Merge two or more sequences.</para>
///</summary>
/// <example><para>Example: Construct a stream of all heroes.</para>
/// <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
/// </code></example>
                            public Union Union ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Union (arguments);
                            }
                            internal Union union ( Object expr, params object[] exprs )
                            {
                               return Union ( expr, exprs );
                            }
/// <summary>
/// <para>Generate a stream of sequential integers in a specified range.</para>
///</summary>
/// <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
/// <code>&gt; r.range(4).run(conn, callback)
/// // result returned to callback
/// [0, 1, 2, 3]
/// </code></example>
                            public Range Range (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Range (arguments);
                            }
                            internal Range range (  )
                            {
                               return Range (  );
                            }
/// <summary>
/// <para>Generate a stream of sequential integers in a specified range.</para>
///</summary>
/// <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
/// <code>&gt; r.range(4).run(conn, callback)
/// // result returned to callback
/// [0, 1, 2, 3]
/// </code></example>
                            public Range Range ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Range (arguments);
                            }
                            internal Range range ( Object expr )
                            {
                               return Range ( expr );
                            }
/// <summary>
/// <para>Generate a stream of sequential integers in a specified range.</para>
///</summary>
/// <example><para>Example: Return a four-element range of <code>[0, 1, 2, 3]</code>.</para>
/// <code>&gt; r.range(4).run(conn, callback)
/// // result returned to callback
/// [0, 1, 2, 3]
/// </code></example>
                            public Range Range ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Range (arguments);
                            }
                            internal Range range ( Object expr, Object exprA )
                            {
                               return Range ( expr, exprA );
                            }
/// <summary>
/// <para>Gets the type of a ReQL query's return value.</para>
///</summary>
/// <example><para>Example: Get the type of a string.</para>
/// <code>r.expr("foo").typeOf().run(conn, callback);
/// // Result passed to callback
/// "STRING"
/// </code></example>
                            public TypeOf TypeOf ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new TypeOf (arguments);
                            }
                            internal TypeOf typeOf ( Object expr )
                            {
                               return TypeOf ( expr );
                            }
/// <summary>
/// <para>Create a database. A RethinkDB database is a collection of tables, similar to
/// relational databases.</para>
///</summary>
/// <example><para>Example: Create a database named 'superheroes'.</para>
/// <code>&gt; r.dbCreate('superheroes').run(conn, callback);
/// // Result passed to callback
/// {
///     "config_changes": [
///         {
///             "new_val": {
///                 "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
///                 "name": "superheroes"
///             },
///             "old_val": null
///         }
///     ],
///     "dbs_created": 1
/// }
/// </code></example>
                            public DbCreate DbCreate ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new DbCreate (arguments);
                            }
                            internal DbCreate dbCreate ( Object expr )
                            {
                               return DbCreate ( expr );
                            }
/// <summary>
/// <para>Drop a database. The database, all its tables, and corresponding data will be deleted.</para>
///</summary>
/// <example><para>Example: Drop a database named 'superheroes'.</para>
/// <code>&gt; r.dbDrop('superheroes').run(conn, callback);
/// // Result passed to callback
/// {
///     "config_changes": [
///         {
///             "old_val": {
///                 "id": "e4689cfc-e903-4532-a0e6-2d6797a43f07",
///                 "name": "superheroes"
///             },
///             "new_val": null
///         }
///     ],
///     "tables_dropped": 3,
///     "dbs_dropped": 1
/// }
/// </code></example>
                            public DbDrop DbDrop ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new DbDrop (arguments);
                            }
                            internal DbDrop dbDrop ( Object expr )
                            {
                               return DbDrop ( expr );
                            }
/// <summary>
/// <para>List all database names in the system. The result is a list of strings.</para>
///</summary>
/// <example><para>Example: List all databases.</para>
/// <code>r.dbList().run(conn, callback)
/// </code></example>
                            public DbList DbList (  )
                            {
                                Arguments arguments = new Arguments();
                                return new DbList (arguments);
                            }
                            internal DbList dbList (  )
                            {
                               return DbList (  );
                            }
/// <summary>
/// <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
///</summary>
/// <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
/// <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
/// // Result passed to callback
/// {
///     "config_changes": [
///         {
///             "new_val": {
///                 "db": "test",
///                 "durability":  "hard",
///                 "id": "20ea60d4-3b76-4817-8828-98a236df0297",
///                 "name": "dc_universe",
///                 "primary_key": "id",
///                 "shards": [
///                     {
///                         "primary_replica": "rethinkdb_srv1",
///                         "replicas": [
///                             "rethinkdb_srv1",
///                             "rethinkdb_srv2"
///                         ]
///                     }
///                 ],
///                 "write_acks": "majority"
///             },
///             "old_val": null
///         }
///     ],
///     "tables_created": 1
/// }
/// </code></example>
                            public TableCreate TableCreate ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new TableCreate (arguments);
                            }
                            internal TableCreate tableCreate ( Object expr )
                            {
                               return TableCreate ( expr );
                            }
/// <summary>
/// <para>Drop a table from a database. The table and all its data will be deleted.</para>
///</summary>
/// <example><para>Example: Drop a table named 'dc_universe'.</para>
/// <code>&gt; r.db('test').tableDrop('dc_universe').run(conn, callback);
/// // Result passed to callback
/// {
///     "config_changes": [
///         {
///             "old_val": {
///                 "db": "test",
///                 "durability":  "hard",
///                 "id": "20ea60d4-3b76-4817-8828-98a236df0297",
///                 "name": "dc_universe",
///                 "primary_key": "id",
///                 "shards": [
///                     {
///                         "primary_replica": "rethinkdb_srv1",
///                         "replicas": [
///                             "rethinkdb_srv1",
///                             "rethinkdb_srv2"
///                         ]
///                     }
///                 ],
///                 "write_acks": "majority"
///             },
///             "new_val": null
///         }
///     ],
///     "tables_dropped": 1
/// }
/// </code></example>
                            public TableDrop TableDrop ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new TableDrop (arguments);
                            }
                            internal TableDrop tableDrop ( Object expr )
                            {
                               return TableDrop ( expr );
                            }
/// <summary>
/// <para>List all table names in a database. The result is a list of strings.</para>
///</summary>
/// <example><para>Example: List all tables of the 'test' database.</para>
/// <code>r.db('test').tableList().run(conn, callback)
/// </code></example>
                            public TableList TableList (  )
                            {
                                Arguments arguments = new Arguments();
                                return new TableList (arguments);
                            }
                            internal TableList tableList (  )
                            {
                               return TableList (  );
                            }
/// <summary>
/// <para>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</para>
///</summary>
/// <example><para>Example: Grant the <code>chatapp</code> user account read and write permissions on the <code>users</code> database.</para>
/// <code>r.db('users').grant('chatapp', {read: true, write: true}).run(conn, callback);
/// 
/// // Result passed to callback
/// {
///     "granted": 1,
///     "permissions_changes": [
///         {
///             "new_val": { "read": true, "write": true },
///             "old_val": { null }
///         }
///     ]
/// </code></example>
                            public Grant Grant ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Grant (arguments);
                            }
                            internal Grant grant ( Object expr, Object exprA )
                            {
                               return Grant ( expr, exprA );
                            }
                            public Funcall Do_ ( Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Javascript js )
                            {
                               return Do_ ( js );
                            }
                            public Funcall Do_ ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Object expr, Javascript js )
                            {
                               return Do_ ( expr, js );
                            }
                            public Funcall Do_ ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Object expr, Object exprA, Javascript js )
                            {
                               return Do_ ( expr, exprA, js );
                            }
                            public Funcall Do_ ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return Do_ ( expr, exprA, exprB, js );
                            }
                            public Funcall Do_ ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func3);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Object expr, Object exprA, Object exprB, ReqlFunction3 func3 )
                            {
                               return Do_ ( expr, exprA, exprB, func3 );
                            }
                            public Funcall Do_ ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func2);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Object expr, Object exprA, ReqlFunction2 func2 )
                            {
                               return Do_ ( expr, exprA, func2 );
                            }
                            public Funcall Do_ ( Object expr, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAddAll(exprs);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Object expr, params object[] exprs )
                            {
                               return Do_ ( expr, exprs );
                            }
                            public Funcall Do_ ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( Object expr, ReqlFunction1 func1 )
                            {
                               return Do_ ( expr, func1 );
                            }
                            public Funcall Do_ ( ReqlFunction0 func0 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(func0);
                                return new Funcall (arguments);
                            }
                            internal Funcall do_ ( ReqlFunction0 func0 )
                            {
                               return Do_ ( func0 );
                            }
/// <summary>
/// <para>Perform a branching conditional equivalent to <code>if-then-else</code>.</para>
/// <para>The <code>branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code>false</code> or <code>null</code> (i.e., "truthy" values), with a final "else" command to be evaluated if all of the conditionals are <code>false</code> or <code>null</code>.</para>
///</summary>
/// <example><para>Example: Test the value of x.</para>
/// <code>var x = 10;
/// r.branch(r.expr(x).gt(5), 'big', 'small').run(conn, callback);
/// // Result passed to callback
/// "big"
/// </code></example>
                            public Branch Branch ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAddAll(exprs);
                                return new Branch (arguments);
                            }
                            internal Branch branch ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                               return Branch ( expr, exprA, exprB, exprs );
                            }
/// <summary>
/// <para>Compute the logical "or" of one or more values.</para>
///</summary>
/// <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).or(b).run(conn, callback);
/// // result passed to callback
/// true
/// </code></example>
                            public Or Or ( params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAddAll(exprs);
                                return new Or (arguments);
                            }
                            internal Or or ( params object[] exprs )
                            {
                               return Or ( exprs );
                            }
/// <summary>
/// <para>Compute the logical "and" of one or more values.</para>
///</summary>
/// <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).and(b).run(conn, callback);
/// // result passed to callback
/// false
/// </code></example>
                            public And And ( params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAddAll(exprs);
                                return new And (arguments);
                            }
                            internal And and ( params object[] exprs )
                            {
                               return And ( exprs );
                            }
                            public Asc Asc ( Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(js);
                                return new Asc (arguments);
                            }
                            internal Asc asc ( Javascript js )
                            {
                               return Asc ( js );
                            }
                            public Asc Asc ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Asc (arguments);
                            }
                            internal Asc asc ( Object expr )
                            {
                               return Asc ( expr );
                            }
                            public Asc Asc ( ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(func1);
                                return new Asc (arguments);
                            }
                            internal Asc asc ( ReqlFunction1 func1 )
                            {
                               return Asc ( func1 );
                            }
                            public Desc Desc ( Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(js);
                                return new Desc (arguments);
                            }
                            internal Desc desc ( Javascript js )
                            {
                               return Desc ( js );
                            }
                            public Desc Desc ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Desc (arguments);
                            }
                            internal Desc desc ( Object expr )
                            {
                               return Desc ( expr );
                            }
                            public Desc Desc ( ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(func1);
                                return new Desc (arguments);
                            }
                            internal Desc desc ( ReqlFunction1 func1 )
                            {
                               return Desc ( func1 );
                            }
/// <summary>
/// <para>Get information about a ReQL value.</para>
///</summary>
/// <example><para>Example: Get information about a table such as primary key, or cache size.</para>
/// <code>r.table('marvel').info().run(conn, callback)
/// </code></example>
                            public Info Info ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Info (arguments);
                            }
                            internal Info info ( Object expr )
                            {
                               return Info ( expr );
                            }
/// <summary>
/// <para>Parse a JSON string on the server.</para>
///</summary>
/// <example><para>Example: Send an array to the server.</para>
/// <code>r.json("[1,2,3]").run(conn, callback)
/// </code></example>
                            public Json Json ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Json (arguments);
                            }
                            internal Json json ( Object expr )
                            {
                               return Json ( expr );
                            }
/// <summary>
/// <para>Create a time object based on an ISO 8601 date-time string (e.g. '2013-01-01T01:01:01+00:00'). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href="http://en.wikipedia.org/wiki/ISO_8601">Wikipedia</a>.</para>
///</summary>
/// <example><para>Example: Update the time of John's birth.</para>
/// <code>r.table("user").get("John").update({birth: r.ISO8601('1986-11-03T08:30:00-07:00')}).run(conn, callback)
/// </code></example>
                            public Iso8601 Iso8601 ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Iso8601 (arguments);
                            }
                            internal Iso8601 iso8601 ( Object expr )
                            {
                               return Iso8601 ( expr );
                            }
/// <summary>
/// <para>Create a time object based on seconds since epoch. The first argument is a double and
/// will be rounded to three decimal places (millisecond-precision).</para>
///</summary>
/// <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986.</para>
/// <code>r.table("user").get("John").update({birthdate: r.epochTime(531360000)}).run(conn, callback)
/// </code></example>
                            public EpochTime EpochTime ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new EpochTime (arguments);
                            }
                            internal EpochTime epochTime ( Object expr )
                            {
                               return EpochTime ( expr );
                            }
/// <summary>
/// <para>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</para>
///</summary>
/// <example><para>Example: Add a new user with the time at which he subscribed.</para>
/// <code>r.table("users").insert({
///     name: "John",
///     subscription_date: r.now()
/// }).run(conn, callback)
/// </code></example>
                            public Now Now (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Now (arguments);
                            }
                            internal Now now (  )
                            {
                               return Now (  );
                            }
/// <summary>
/// <para>Create a time object for a specific time.</para>
///</summary>
/// <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
/// <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)
/// </code></example>
                            public Time Time ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Time (arguments);
                            }
                            internal Time time ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                               return Time ( expr, exprA, exprB, exprC );
                            }
/// <summary>
/// <para>Create a time object for a specific time.</para>
///</summary>
/// <example><para>Example: Update the birthdate of the user "John" to November 3rd, 1986 UTC.</para>
/// <code>r.table("user").get("John").update({birthdate: r.time(1986, 11, 3, 'Z')}).run(conn, callback)
/// </code></example>
                            public Time Time ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD, Object exprE, Object exprF )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(exprD);
                                arguments.CoerceAndAdd(exprE);
                                arguments.CoerceAndAdd(exprF);
                                return new Time (arguments);
                            }
                            internal Time time ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD, Object exprE, Object exprF )
                            {
                               return Time ( expr, exprA, exprB, exprC, exprD, exprE, exprF );
                            }
                            public Monday Monday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Monday (arguments);
                            }
                            internal Monday monday (  )
                            {
                               return Monday (  );
                            }
                            public Tuesday Tuesday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Tuesday (arguments);
                            }
                            internal Tuesday tuesday (  )
                            {
                               return Tuesday (  );
                            }
                            public Wednesday Wednesday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Wednesday (arguments);
                            }
                            internal Wednesday wednesday (  )
                            {
                               return Wednesday (  );
                            }
                            public Thursday Thursday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Thursday (arguments);
                            }
                            internal Thursday thursday (  )
                            {
                               return Thursday (  );
                            }
                            public Friday Friday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Friday (arguments);
                            }
                            internal Friday friday (  )
                            {
                               return Friday (  );
                            }
                            public Saturday Saturday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Saturday (arguments);
                            }
                            internal Saturday saturday (  )
                            {
                               return Saturday (  );
                            }
                            public Sunday Sunday (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Sunday (arguments);
                            }
                            internal Sunday sunday (  )
                            {
                               return Sunday (  );
                            }
                            public January January (  )
                            {
                                Arguments arguments = new Arguments();
                                return new January (arguments);
                            }
                            internal January january (  )
                            {
                               return January (  );
                            }
                            public February February (  )
                            {
                                Arguments arguments = new Arguments();
                                return new February (arguments);
                            }
                            internal February february (  )
                            {
                               return February (  );
                            }
                            public March March (  )
                            {
                                Arguments arguments = new Arguments();
                                return new March (arguments);
                            }
                            internal March march (  )
                            {
                               return March (  );
                            }
                            public April April (  )
                            {
                                Arguments arguments = new Arguments();
                                return new April (arguments);
                            }
                            internal April april (  )
                            {
                               return April (  );
                            }
                            public May May (  )
                            {
                                Arguments arguments = new Arguments();
                                return new May (arguments);
                            }
                            internal May may (  )
                            {
                               return May (  );
                            }
                            public June June (  )
                            {
                                Arguments arguments = new Arguments();
                                return new June (arguments);
                            }
                            internal June june (  )
                            {
                               return June (  );
                            }
                            public July July (  )
                            {
                                Arguments arguments = new Arguments();
                                return new July (arguments);
                            }
                            internal July july (  )
                            {
                               return July (  );
                            }
                            public August August (  )
                            {
                                Arguments arguments = new Arguments();
                                return new August (arguments);
                            }
                            internal August august (  )
                            {
                               return August (  );
                            }
                            public September September (  )
                            {
                                Arguments arguments = new Arguments();
                                return new September (arguments);
                            }
                            internal September september (  )
                            {
                               return September (  );
                            }
                            public October October (  )
                            {
                                Arguments arguments = new Arguments();
                                return new October (arguments);
                            }
                            internal October october (  )
                            {
                               return October (  );
                            }
                            public November November (  )
                            {
                                Arguments arguments = new Arguments();
                                return new November (arguments);
                            }
                            internal November november (  )
                            {
                               return November (  );
                            }
                            public December December (  )
                            {
                                Arguments arguments = new Arguments();
                                return new December (arguments);
                            }
                            internal December december (  )
                            {
                               return December (  );
                            }
/// <summary>
/// <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
///</summary>
/// <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
/// <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
/// 
/// // Result passed to callback
/// {
///     "id": 1,
///     "name": "Alice",
///     "data": {
///         "age": 19,
///         "job": "Engineer"
///     }
/// }
/// </code></example>
                            public Literal Literal (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Literal (arguments);
                            }
                            internal Literal literal (  )
                            {
                               return Literal (  );
                            }
/// <summary>
/// <para>Replace an object in a field instead of merging it with an existing object in a <code>merge</code> or <code>update</code> operation. Using <code>literal</code> with no arguments in a <code>merge</code> or <code>update</code> operation will remove the corresponding field.</para>
///</summary>
/// <example><para>Example: Replace one nested document with another rather than merging the fields.</para>
/// <code>r.table('users').get(1).update({ data: r.literal({ age: 19, job: 'Engineer' }) }).run(conn, callback)
/// 
/// // Result passed to callback
/// {
///     "id": 1,
///     "name": "Alice",
///     "data": {
///         "age": 19,
///         "job": "Engineer"
///     }
/// }
/// </code></example>
                            public Literal Literal ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Literal (arguments);
                            }
                            internal Literal literal ( Object expr )
                            {
                               return Literal ( expr );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr )
                            {
                               return Group ( expr );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js )
                            {
                               return Group ( expr, js );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA )
                            {
                               return Group ( expr, js, jsA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return Group ( expr, js, jsA, jsB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(jsC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                            {
                               return Group ( expr, js, jsA, jsB, jsC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                            {
                               return Group ( expr, js, jsA, jsB, exprA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Object exprA )
                            {
                               return Group ( expr, js, jsA, exprA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                            {
                               return Group ( expr, js, jsA, exprA, jsB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Javascript jsA, Object exprA, Object exprB )
                            {
                               return Group ( expr, js, jsA, exprA, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA )
                            {
                               return Group ( expr, js, exprA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Javascript jsA )
                            {
                               return Group ( expr, js, exprA, jsA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                            {
                               return Group ( expr, js, exprA, jsA, jsB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Javascript jsA, Object exprB )
                            {
                               return Group ( expr, js, exprA, jsA, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Object exprB )
                            {
                               return Group ( expr, js, exprA, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Object exprB, Javascript jsA )
                            {
                               return Group ( expr, js, exprA, exprB, jsA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Javascript js, Object exprA, Object exprB, Object exprC )
                            {
                               return Group ( expr, js, exprA, exprB, exprC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA )
                            {
                               return Group ( expr, exprA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js )
                            {
                               return Group ( expr, exprA, js );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Javascript jsA )
                            {
                               return Group ( expr, exprA, js, jsA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(jsB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                            {
                               return Group ( expr, exprA, js, jsA, jsB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Javascript jsA, Object exprB )
                            {
                               return Group ( expr, exprA, js, jsA, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Object exprB )
                            {
                               return Group ( expr, exprA, js, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Object exprB, Javascript jsA )
                            {
                               return Group ( expr, exprA, js, exprB, jsA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Javascript js, Object exprB, Object exprC )
                            {
                               return Group ( expr, exprA, js, exprB, exprC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB )
                            {
                               return Group ( expr, exprA, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Javascript js )
                            {
                               return Group ( expr, exprA, exprB, js );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(jsA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Javascript js, Javascript jsA )
                            {
                               return Group ( expr, exprA, exprB, js, jsA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(js);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Javascript js, Object exprC )
                            {
                               return Group ( expr, exprA, exprB, js, exprC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC )
                            {
                               return Group ( expr, exprA, exprB, exprC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(js);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC, Javascript js )
                            {
                               return Group ( expr, exprA, exprB, exprC, js );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(exprD);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC, Object exprD )
                            {
                               return Group ( expr, exprA, exprB, exprC, exprD );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                            {
                               return Group ( expr, exprA, exprB, exprC, func1 );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1 )
                            {
                               return Group ( expr, exprA, exprB, func1 );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                            {
                               return Group ( expr, exprA, exprB, func1, exprC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return Group ( expr, exprA, exprB, func1, func1A );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1 )
                            {
                               return Group ( expr, exprA, func1 );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB )
                            {
                               return Group ( expr, exprA, func1, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                            {
                               return Group ( expr, exprA, func1, exprB, exprC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                            {
                               return Group ( expr, exprA, func1, exprB, func1A );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return Group ( expr, exprA, func1, func1A );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                            {
                               return Group ( expr, exprA, func1, func1A, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return Group ( expr, exprA, func1, func1A, func1B );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1 )
                            {
                               return Group ( expr, func1 );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA )
                            {
                               return Group ( expr, func1, exprA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB )
                            {
                               return Group ( expr, func1, exprA, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(exprC);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                            {
                               return Group ( expr, func1, exprA, exprB, exprC );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                            {
                               return Group ( expr, func1, exprA, exprB, func1A );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                            {
                               return Group ( expr, func1, exprA, func1A );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                            {
                               return Group ( expr, func1, exprA, func1A, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return Group ( expr, func1, exprA, func1A, func1B );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A )
                            {
                               return Group ( expr, func1, func1A );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                            {
                               return Group ( expr, func1, func1A, exprA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                            {
                               return Group ( expr, func1, func1A, exprA, exprB );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                            {
                               return Group ( expr, func1, func1A, exprA, func1B );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                            {
                               return Group ( expr, func1, func1A, func1B );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(exprA);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                            {
                               return Group ( expr, func1, func1A, func1B, exprA );
                            }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
///</summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                            public Group Group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                arguments.CoerceAndAdd(func1A);
                                arguments.CoerceAndAdd(func1B);
                                arguments.CoerceAndAdd(func1C);
                                return new Group (arguments);
                            }
                            internal Group group ( Object expr, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                            {
                               return Group ( expr, func1, func1A, func1B, func1C );
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Sum (arguments);
                            }
                            internal Sum sum ( Object expr )
                            {
                               return Sum ( expr );
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Sum (arguments);
                            }
                            internal Sum sum ( Object expr, Javascript js )
                            {
                               return Sum ( expr, js );
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Sum (arguments);
                            }
                            internal Sum sum ( Object expr, Object exprA )
                            {
                               return Sum ( expr, exprA );
                            }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                            public Sum Sum ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Sum (arguments);
                            }
                            internal Sum sum ( Object expr, ReqlFunction1 func1 )
                            {
                               return Sum ( expr, func1 );
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Avg (arguments);
                            }
                            internal Avg avg ( Object expr )
                            {
                               return Avg ( expr );
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Avg (arguments);
                            }
                            internal Avg avg ( Object expr, Javascript js )
                            {
                               return Avg ( expr, js );
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Avg (arguments);
                            }
                            internal Avg avg ( Object expr, Object exprA )
                            {
                               return Avg ( expr, exprA );
                            }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
///</summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                            public Avg Avg ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Avg (arguments);
                            }
                            internal Avg avg ( Object expr, ReqlFunction1 func1 )
                            {
                               return Avg ( expr, func1 );
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Min (arguments);
                            }
                            internal Min min ( Object expr )
                            {
                               return Min ( expr );
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Min (arguments);
                            }
                            internal Min min ( Object expr, Javascript js )
                            {
                               return Min ( expr, js );
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Min (arguments);
                            }
                            internal Min min ( Object expr, Object exprA )
                            {
                               return Min ( expr, exprA );
                            }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                            public Min Min ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Min (arguments);
                            }
                            internal Min min ( Object expr, ReqlFunction1 func1 )
                            {
                               return Min ( expr, func1 );
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Max (arguments);
                            }
                            internal Max max ( Object expr )
                            {
                               return Max ( expr );
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr, Javascript js )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(js);
                                return new Max (arguments);
                            }
                            internal Max max ( Object expr, Javascript js )
                            {
                               return Max ( expr, js );
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Max (arguments);
                            }
                            internal Max max ( Object expr, Object exprA )
                            {
                               return Max ( expr, exprA );
                            }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
///</summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                            public Max Max ( Object expr, ReqlFunction1 func1 )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(func1);
                                return new Max (arguments);
                            }
                            internal Max max ( Object expr, ReqlFunction1 func1 )
                            {
                               return Max ( expr, func1 );
                            }
/// <summary>
/// <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
///</summary>
/// <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
/// <code>r.random().run(conn, callback)
/// </code></example>
                            public Random Random (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Random (arguments);
                            }
                            internal Random random (  )
                            {
                               return Random (  );
                            }
/// <summary>
/// <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
///</summary>
/// <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
/// <code>r.random().run(conn, callback)
/// </code></example>
                            public Random Random ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Random (arguments);
                            }
                            internal Random random ( Object expr )
                            {
                               return Random ( expr );
                            }
/// <summary>
/// <para>Generate a random number between given (or implied) bounds. <code>random</code> takes zero, one or two arguments.</para>
///</summary>
/// <example><para>Example: Generate a random number in the range <code>[0,1)</code></para>
/// <code>r.random().run(conn, callback)
/// </code></example>
                            public Random Random ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Random (arguments);
                            }
                            internal Random random ( Object expr, Object exprA )
                            {
                               return Random ( expr, exprA );
                            }
/// <summary>
/// <para><code>r.args</code> is a special term that's used to splice an array of arguments
/// into another term.  This is useful when you want to call a variadic
/// term such as <a href="/api/javascript/get_all/">getAll</a> with a set of arguments produced at runtime.</para>
///</summary>
/// <example><para>Example: Get Alice and Bob from the table <code>people</code>.</para>
/// <code>r.table('people').getAll('Alice', 'Bob').run(conn, callback)
/// // or
/// r.table('people').getAll(r.args(['Alice', 'Bob'])).run(conn, callback)
/// </code></example>
                            public Args Args ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Args (arguments);
                            }
                            internal Args args ( Object expr )
                            {
                               return Args ( expr );
                            }
/// <summary>
/// <para>Encapsulate binary data within a query.</para>
///</summary>
/// <example><para>Example: Save an avatar image to a existing user record.</para>
/// <code>var fs = require('fs');
/// fs.readFile('./defaultAvatar.png', function (err, avatarImage) {
///     if (err) {
///         // Handle error
///     }
///     else {
///         r.table('users').get(100).update({
///             avatar: avatarImage
///         })
///     }
/// });
/// </code></example>
                            public Binary Binary ( Object expr )
                            {
                                   var byteArray = expr as byte[];
                                   if( byteArray != null ){
                                     return new Binary(byteArray);
                                   }
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Binary (arguments);
                            }
                            internal Binary binary ( Object expr )
                            {
                               return Binary ( expr );
                            }
/// <summary>
/// <para>Convert a <a href="http://geojson.org">GeoJSON</a> object to a ReQL geometry object.</para>
///</summary>
/// <example><para>Example: Convert a GeoJSON object to a ReQL geometry object.</para>
/// <code>var geoJson = {
///     'type': 'Point',
///     'coordinates': [ -122.423246, 37.779388 ]
/// };
/// r.table('geo').insert({
///     id: 'sfo',
///     name: 'San Francisco',
///     location: r.geojson(geoJson)
/// }).run(conn, callback);
/// </code></example>
                            public Geojson Geojson ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Geojson (arguments);
                            }
                            internal Geojson geojson ( Object expr )
                            {
                               return Geojson ( expr );
                            }
/// <summary>
/// <para>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (-180 to 180) and latitude (-90 to 90) of the point on a perfect sphere. See <a href="/docs/geo-support/">Geospatial support</a> for more information on ReQL's coordinate system.</para>
///</summary>
/// <example><para>Example: Define a point.</para>
/// <code>r.table('geo').insert({
///     id: 1,
///     name: 'San Francisco',
///     location: r.point(-122.423246,37.779388)
/// }).run(conn, callback);
/// </code></example>
                            public Point Point ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Point (arguments);
                            }
                            internal Point point ( Object expr, Object exprA )
                            {
                               return Point ( expr, exprA );
                            }
/// <summary>
/// <para>Construct a geometry object of type Line. The line can be specified in one of two ways:</para>
/// <ul>
/// <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line's vertices;</li>
/// <li>Two or more <a href="/api/javascript/point">Point</a> objects specifying the line's vertices.</li>
/// </ul>
///</summary>
/// <example><para>Example: Define a line.</para>
/// <code>r.table('geo').insert({
///     id: 101,
///     route: r.line([-122.423246,37.779388], [-121.886420,37.329898])
/// }).run(conn, callback);
/// </code></example>
                            public Line Line ( Object expr, Object exprA, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAddAll(exprs);
                                return new Line (arguments);
                            }
                            internal Line line ( Object expr, Object exprA, params object[] exprs )
                            {
                               return Line ( expr, exprA, exprs );
                            }
/// <summary>
/// <para>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</para>
/// <ul>
/// <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon's vertices;</li>
/// <li>Three or more <a href="/api/javascript/point">Point</a> objects specifying the polygon's vertices.</li>
/// </ul>
///</summary>
/// <example><para>Example: Define a polygon.</para>
/// <code>r.table('geo').insert({
///     id: 101,
///     rectangle: r.polygon(
///         [-122.423246,37.779388],
///         [-122.423246,37.329898],
///         [-121.886420,37.329898],
///         [-121.886420,37.779388]
///     )
/// }).run(conn, callback);
/// </code></example>
                            public Polygon Polygon ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                arguments.CoerceAndAddAll(exprs);
                                return new Polygon (arguments);
                            }
                            internal Polygon polygon ( Object expr, Object exprA, Object exprB, params object[] exprs )
                            {
                               return Polygon ( expr, exprA, exprB, exprs );
                            }
/// <summary>
/// <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
///</summary>
/// <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
/// <code>var point1 = r.point(-122.423246,37.779388);
/// var point2 = r.point(-117.220406,32.719464);
/// r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
/// // result returned to callback
/// 734.1252496021841
/// </code></example>
                            public Distance Distance ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Distance (arguments);
                            }
                            internal Distance distance ( Object expr, Object exprA )
                            {
                               return Distance ( expr, exprA );
                            }
/// <summary>
/// <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
///</summary>
/// <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback
/// true
/// </code></example>
                            public Intersects Intersects ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Intersects (arguments);
                            }
                            internal Intersects intersects ( Object expr, Object exprA )
                            {
                               return Intersects ( expr, exprA );
                            }
/// <summary>
/// <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
///</summary>
/// <example><para>Example: Define a circle.</para>
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                            public Circle Circle ( Object expr )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                return new Circle (arguments);
                            }
                            internal Circle circle ( Object expr )
                            {
                               return Circle ( expr );
                            }
/// <summary>
/// <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
///</summary>
/// <example><para>Example: Define a circle.</para>
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                            public Circle Circle ( Object expr, Object exprA )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                return new Circle (arguments);
                            }
                            internal Circle circle ( Object expr, Object exprA )
                            {
                               return Circle ( expr, exprA );
                            }
/// <summary>
/// <para>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</para>
///</summary>
/// <example><para>Example: Define a circle.</para>
/// <code>r.table('geo').insert({
///     id: 300,
///     name: 'Hayes Valley',
///     neighborhood: r.circle([-122.423246,37.779388], 1000)
/// }).run(conn, callback);
/// </code></example>
                            public Circle Circle ( Object expr, Object exprA, Object exprB )
                            {
                                Arguments arguments = new Arguments();
                                arguments.CoerceAndAdd(expr);
                                arguments.CoerceAndAdd(exprA);
                                arguments.CoerceAndAdd(exprB);
                                return new Circle (arguments);
                            }
                            internal Circle circle ( Object expr, Object exprA, Object exprB )
                            {
                               return Circle ( expr, exprA, exprB );
                            }
                            public Minval Minval (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Minval (arguments);
                            }
                            internal Minval minval (  )
                            {
                               return Minval (  );
                            }
                            public Maxval Maxval (  )
                            {
                                Arguments arguments = new Arguments();
                                return new Maxval (arguments);
                            }
                            internal Maxval maxval (  )
                            {
                               return Maxval (  );
                            }



    }
}
