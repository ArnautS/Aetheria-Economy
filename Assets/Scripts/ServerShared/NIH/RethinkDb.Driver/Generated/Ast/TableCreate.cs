














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class TableCreate : ReqlExpr {

    
    
    
/// <summary>
/// <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
/// </summary>
/// <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
/// <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
/// // Result passed to callback
/// {
///     "config_changes": [
///         {
///             "new_val": {
///                 "db": "test",
///                 "durability":  "hard",
///                 "id": "20ea60d4-3b76-4817-8828-98a236df0297",
///                 "name": "dc_universe",
///                 "primary_key": "id",
///                 "shards": [
///                     {
///                         "primary_replica": "rethinkdb_srv1",
///                         "replicas": [
///                             "rethinkdb_srv1",
///                             "rethinkdb_srv2"
///                         ]
///                     }
///                 ],
///                 "write_acks": "majority"
///             },
///             "old_val": null
///         }
///     ],
///     "tables_created": 1
/// }
/// </code></example>
        public TableCreate (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
/// </summary>
/// <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
/// <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
/// // Result passed to callback
/// {
///     "config_changes": [
///         {
///             "new_val": {
///                 "db": "test",
///                 "durability":  "hard",
///                 "id": "20ea60d4-3b76-4817-8828-98a236df0297",
///                 "name": "dc_universe",
///                 "primary_key": "id",
///                 "shards": [
///                     {
///                         "primary_replica": "rethinkdb_srv1",
///                         "replicas": [
///                             "rethinkdb_srv1",
///                             "rethinkdb_srv2"
///                         ]
///                     }
///                 ],
///                 "write_acks": "majority"
///             },
///             "old_val": null
///         }
///     ],
///     "tables_created": 1
/// }
/// </code></example>
        public TableCreate (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Create a table. A RethinkDB table is a collection of JSON documents.</para>
/// </summary>
/// <example><para>Example: Create a table named 'dc_universe' with the default settings.</para>
/// <code>&gt; r.db('heroes').tableCreate('dc_universe').run(conn, callback);
/// // Result passed to callback
/// {
///     "config_changes": [
///         {
///             "new_val": {
///                 "db": "test",
///                 "durability":  "hard",
///                 "id": "20ea60d4-3b76-4817-8828-98a236df0297",
///                 "name": "dc_universe",
///                 "primary_key": "id",
///                 "shards": [
///                     {
///                         "primary_replica": "rethinkdb_srv1",
///                         "replicas": [
///                             "rethinkdb_srv1",
///                             "rethinkdb_srv2"
///                         ]
///                     }
///                 ],
///                 "write_acks": "majority"
///             },
///             "old_val": null
///         }
///     ],
///     "tables_created": 1
/// }
/// </code></example>
        public TableCreate (Arguments args, OptArgs optargs)
         : base(TermType.TABLE_CREATE, args, optargs) {
        }


    



    
///<summary>
/// "primary_key": "T_STR",
///  "durability": "E_DURABILITY",
///  "shards": "T_NUM",
///  "replicas": [
///    "T_NUM",
///    "T_OBJECT"
///  ],
///  "primary_replica_tag": "T_STR"
///</summary>
        public TableCreate this[object optArgs] {
            get
            {
                var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
        
                return new TableCreate (this.Args, newOptArgs);
            }
        }
        
///<summary>
/// "primary_key": "T_STR",
///  "durability": "E_DURABILITY",
///  "shards": "T_NUM",
///  "replicas": [
///    "T_NUM",
///    "T_OBJECT"
///  ],
///  "primary_replica_tag": "T_STR"
///</summary>
    public TableCreate this[OptArgs optArgs] {
        get
        {
            var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
    
            return new TableCreate (this.Args, newOptArgs);
        }
    }
    
///<summary>
/// "primary_key": "T_STR",
///  "durability": "E_DURABILITY",
///  "shards": "T_NUM",
///  "replicas": [
///    "T_NUM",
///    "T_OBJECT"
///  ],
///  "primary_replica_tag": "T_STR"
///</summary>
        public TableCreate OptArg(string key, object val){
            
            var newOptArgs = OptArgs.FromMap(this.OptArgs).With(key, val);
        
            return new TableCreate (this.Args, newOptArgs);
        }
        internal TableCreate optArg(string key, object val){
        
            return this.OptArg(key, val);
        }


    

    
        /// <summary>
        /// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        /// </summary>
        /// <param name="bracket"></param>
        public new Bracket this[string bracket] => base[bracket];
        
        /// <summary>
        /// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        /// </summary>
        /// <param name="bracket"></param>
        /// <returns></returns>
        public new Bracket this[int bracket] => base[bracket];


    

    


    
    }
}
