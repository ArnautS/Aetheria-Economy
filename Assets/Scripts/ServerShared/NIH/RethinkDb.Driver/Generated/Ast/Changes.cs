














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class Changes : ReqlExpr {

    
    
    
/// <summary>
/// <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <para>Start monitoring the changefeed in one client:</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log);
/// });
/// </code>
/// <para>As these queries are performed in a second client, the first
/// client would receive and print the following objects:</para>
/// <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
/// {old_val: null, new_val: {id: 1}}
/// 
/// &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
/// {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
/// 
/// &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
/// {old_val: {id: 1, player1: 'Bob'},
///  new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
/// 
/// &gt; r.table('games').get(1).delete().run(conn, callback)
/// {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
/// 
/// &gt; r.tableDrop('games').run(conn, callback);
/// ReqlRuntimeError: Changefeed aborted (table unavailable)
/// </code></example>
        public Changes (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <para>Start monitoring the changefeed in one client:</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log);
/// });
/// </code>
/// <para>As these queries are performed in a second client, the first
/// client would receive and print the following objects:</para>
/// <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
/// {old_val: null, new_val: {id: 1}}
/// 
/// &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
/// {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
/// 
/// &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
/// {old_val: {id: 1, player1: 'Bob'},
///  new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
/// 
/// &gt; r.table('games').get(1).delete().run(conn, callback)
/// {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
/// 
/// &gt; r.tableDrop('games').run(conn, callback);
/// ReqlRuntimeError: Changefeed aborted (table unavailable)
/// </code></example>
        public Changes (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <para>Start monitoring the changefeed in one client:</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log);
/// });
/// </code>
/// <para>As these queries are performed in a second client, the first
/// client would receive and print the following objects:</para>
/// <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
/// {old_val: null, new_val: {id: 1}}
/// 
/// &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
/// {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
/// 
/// &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
/// {old_val: {id: 1, player1: 'Bob'},
///  new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
/// 
/// &gt; r.table('games').get(1).delete().run(conn, callback)
/// {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
/// 
/// &gt; r.tableDrop('games').run(conn, callback);
/// ReqlRuntimeError: Changefeed aborted (table unavailable)
/// </code></example>
        public Changes (Arguments args, OptArgs optargs)
         : base(TermType.CHANGES, args, optargs) {
        }


    



    
///<summary>
/// "squash": "T_BOOL",
///  "include_states": "T_BOOL",
///  "include_initial": "T_BOOL"
///</summary>
        public Changes this[object optArgs] {
            get
            {
                var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
        
                return new Changes (this.Args, newOptArgs);
            }
        }
        
///<summary>
/// "squash": "T_BOOL",
///  "include_states": "T_BOOL",
///  "include_initial": "T_BOOL"
///</summary>
    public Changes this[OptArgs optArgs] {
        get
        {
            var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
    
            return new Changes (this.Args, newOptArgs);
        }
    }
    
///<summary>
/// "squash": "T_BOOL",
///  "include_states": "T_BOOL",
///  "include_initial": "T_BOOL"
///</summary>
        public Changes OptArg(string key, object val){
            
            var newOptArgs = OptArgs.FromMap(this.OptArgs).With(key, val);
        
            return new Changes (this.Args, newOptArgs);
        }
        internal Changes optArg(string key, object val){
        
            return this.OptArg(key, val);
        }


    

    
        /// <summary>
        /// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        /// </summary>
        /// <param name="bracket"></param>
        public new Bracket this[string bracket] => base[bracket];
        
        /// <summary>
        /// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        /// </summary>
        /// <param name="bracket"></param>
        /// <returns></returns>
        public new Bracket this[int bracket] => base[bracket];


    

    


    
    }
}
