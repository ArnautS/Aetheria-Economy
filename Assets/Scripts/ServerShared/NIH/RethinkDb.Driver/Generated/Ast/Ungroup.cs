














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class Ungroup : ReqlExpr {

    
    
    
/// <summary>
/// <para>Takes a grouped stream or grouped data and turns it into an array of
/// objects representing the groups.  Any commands chained after <code>ungroup</code>
/// will operate on this array, rather than operating on each group
/// individually.  This is useful if you want to e.g. order the groups by
/// the value of their reduction.</para>
/// </summary>
/// <example><para>Example: What is the maximum number of points scored by each
/// player, with the highest scorers first?</para>
/// <code>r.table('games')
///    .group('player').max('points')('points')
///    .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
/// </code></example>
        public Ungroup (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Takes a grouped stream or grouped data and turns it into an array of
/// objects representing the groups.  Any commands chained after <code>ungroup</code>
/// will operate on this array, rather than operating on each group
/// individually.  This is useful if you want to e.g. order the groups by
/// the value of their reduction.</para>
/// </summary>
/// <example><para>Example: What is the maximum number of points scored by each
/// player, with the highest scorers first?</para>
/// <code>r.table('games')
///    .group('player').max('points')('points')
///    .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
/// </code></example>
        public Ungroup (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Takes a grouped stream or grouped data and turns it into an array of
/// objects representing the groups.  Any commands chained after <code>ungroup</code>
/// will operate on this array, rather than operating on each group
/// individually.  This is useful if you want to e.g. order the groups by
/// the value of their reduction.</para>
/// </summary>
/// <example><para>Example: What is the maximum number of points scored by each
/// player, with the highest scorers first?</para>
/// <code>r.table('games')
///    .group('player').max('points')('points')
///    .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
/// </code></example>
        public Ungroup (Arguments args, OptArgs optargs)
         : base(TermType.UNGROUP, args, optargs) {
        }


    



    


    

    
        /// <summary>
        /// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        /// </summary>
        /// <param name="bracket"></param>
        public new Bracket this[string bracket] => base[bracket];
        
        /// <summary>
        /// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        /// </summary>
        /// <param name="bracket"></param>
        /// <returns></returns>
        public new Bracket this[int bracket] => base[bracket];


    

    


    
    }
}
