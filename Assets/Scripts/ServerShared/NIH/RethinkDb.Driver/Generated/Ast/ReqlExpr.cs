














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class ReqlExpr : ReqlAst {

    
    
    
        protected ReqlExpr (TermType termType, Arguments args, OptArgs optargs) : base(termType, args, optargs)
        {
        }


    



    


    

    


    

    

/// <summary>
/// <para>Test if two or more values are equal.</para>
/// </summary>
/// <example><para>Example: See if a user's <code>role</code> field is set to <code>administrator</code>.</para>
/// <code>r.table('users').get(1)('role').eq('administrator').run(conn, callback);
/// </code></example>
                        public Eq Eq ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Eq (arguments );
                        }
                        internal Eq eq ( Object exprA, params object[] exprs )
                        {
                           return Eq ( exprA, exprs );
                        }
/// <summary>
/// <para>Test if two or more values are not equal.</para>
/// </summary>
/// <example><para>Example: See if a user's <code>role</code> field is not set to <code>administrator</code>.</para>
/// <code>r.table('users').get(1)('role').ne('administrator').run(conn, callback);
/// </code></example>
                        public Ne Ne ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Ne (arguments );
                        }
                        internal Ne ne ( Object exprA, params object[] exprs )
                        {
                           return Ne ( exprA, exprs );
                        }
/// <summary>
/// <para>Compare values, testing if the left-hand value is less than the right-hand.</para>
/// </summary>
/// <example><para>Example: Test if a player has scored less than 10 points.</para>
/// <code>r.table('players').get(1)('score').lt(10).run(conn, callback);
/// </code></example>
                        public Lt Lt ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Lt (arguments );
                        }
                        internal Lt lt ( Object exprA, params object[] exprs )
                        {
                           return Lt ( exprA, exprs );
                        }
/// <summary>
/// <para>Compare values, testing if the left-hand value is less than or equal to the right-hand.</para>
/// </summary>
/// <example><para>Example: Test if a player has scored 10 points or less.</para>
/// <code>r.table('players').get(1)('score').le(10).run(conn, callback);
/// </code></example>
                        public Le Le ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Le (arguments );
                        }
                        internal Le le ( Object exprA, params object[] exprs )
                        {
                           return Le ( exprA, exprs );
                        }
/// <summary>
/// <para>Compare values, testing if the left-hand value is greater than the right-hand.</para>
/// </summary>
/// <example><para>Example: Test if a player has scored more than 10 points.</para>
/// <code>r.table('players').get(1)('score').gt(10).run(conn, callback);
/// </code></example>
                        public Gt Gt ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Gt (arguments );
                        }
                        internal Gt gt ( Object exprA, params object[] exprs )
                        {
                           return Gt ( exprA, exprs );
                        }
/// <summary>
/// <para>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</para>
/// </summary>
/// <example><para>Example: Test if a player has scored 10 points or more.</para>
/// <code>r.table('players').get(1)('score').ge(10).run(conn, callback);
/// </code></example>
                        public Ge Ge ( Object exprA, params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAddAll(exprs);
                            return new Ge (arguments );
                        }
                        internal Ge ge ( Object exprA, params object[] exprs )
                        {
                           return Ge ( exprA, exprs );
                        }
/// <summary>
/// <para>Compute the logical inverse (not) of an expression.</para>
/// </summary>
/// <example><para>Example: Not true is false.</para>
/// <code>r(true).not().run(conn, callback)
/// r.not(true).run(conn, callback)
/// </code>
/// <para>These evaluate to <code>false</code>.</para></example>
                        public Not Not (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Not (arguments );
                        }
                        internal Not not (  )
                        {
                           return Not (  );
                        }
/// <summary>
/// <para>Sum two or more numbers, or concatenate two or more strings or arrays.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 + 2 = 4.</para>
/// <code>&gt; r.expr(2).add(2).run(conn, callback)
/// // result passed to callback
/// 4
/// </code></example>
                        public Add Add ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Add (arguments );
                        }
                        internal Add add ( params object[] exprs )
                        {
                           return Add ( exprs );
                        }
/// <summary>
/// <para>Subtract two numbers.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 - 2 = 0.</para>
/// <code>r.expr(2).sub(2).run(conn, callback)
/// </code></example>
                        public Sub Sub ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Sub (arguments );
                        }
                        internal Sub sub ( params object[] exprs )
                        {
                           return Sub ( exprs );
                        }
/// <summary>
/// <para>Multiply two numbers, or make a periodic array.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 * 2 = 4.</para>
/// <code>r.expr(2).mul(2).run(conn, callback)
/// </code></example>
                        public Mul Mul ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Mul (arguments );
                        }
                        internal Mul mul ( params object[] exprs )
                        {
                           return Mul ( exprs );
                        }
/// <summary>
/// <para>Divide two numbers.</para>
/// </summary>
/// <example><para>Example: It's as easy as 2 / 2 = 1.</para>
/// <code>r.expr(2).div(2).run(conn, callback)
/// </code></example>
                        public Div Div ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Div (arguments );
                        }
                        internal Div div ( params object[] exprs )
                        {
                           return Div ( exprs );
                        }
/// <summary>
/// 
/// </summary>
/// <example><para>Example: It's as easy as 2 % 2 = 0.</para>
/// <code>r.expr(2).mod(2).run(conn, callback)
/// </code></example>
                        public Mod Mod ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Mod (arguments );
                        }
                        internal Mod mod ( Object exprA )
                        {
                           return Mod ( exprA );
                        }
/// <summary>
/// <para>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value's floor).</para>
/// </summary>
/// <example><para>Example: Return the floor of 12.345.</para>
/// <code>r.floor(12.345).run(conn, callback);
/// // Result passed to callback
/// 12.0
/// </code>
/// <para>The <code>floor</code> command can also be chained after an expression.</para></example>
                        public Floor Floor (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Floor (arguments );
                        }
                        internal Floor floor (  )
                        {
                           return Floor (  );
                        }
/// <summary>
/// <para>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value's ceiling).</para>
/// </summary>
/// <example><para>Example: Return the ceiling of 12.345.</para>
/// <code>r.ceil(12.345).run(conn, callback);
/// // Result passed to callback
/// 13.0
/// </code>
/// <para>The <code>ceil</code> command can also be chained after an expression.</para></example>
                        public Ceil Ceil (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Ceil (arguments );
                        }
                        internal Ceil ceil (  )
                        {
                           return Ceil (  );
                        }
/// <summary>
/// <para>Rounds the given value to the nearest whole integer.</para>
/// </summary>
/// <example><para>Example: Round 12.345 to the nearest integer.</para>
/// <code>r.round(12.345).run(conn, callback);
/// // Result passed to callback
/// 12.0
/// </code>
/// <para>The <code>round</code> command can also be chained after an expression.</para></example>
                        public Round Round (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Round (arguments );
                        }
                        internal Round round (  )
                        {
                           return Round (  );
                        }
/// <summary>
/// <para>Append a value to an array.</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)
/// </code></example>
                        public Append Append ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Append (arguments );
                        }
                        internal Append append ( Object exprA )
                        {
                           return Append ( exprA );
                        }
/// <summary>
/// <para>Prepend a value to an array.</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').prepend('newBoots').run(conn, callback)
/// </code></example>
                        public Prepend Prepend ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Prepend (arguments );
                        }
                        internal Prepend prepend ( Object exprA )
                        {
                           return Prepend ( exprA );
                        }
/// <summary>
/// <para>Remove the elements of one array from another array.</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list without boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment')
///   .difference(['Boots'])
///   .run(conn, callback)
/// </code></example>
                        public Difference Difference ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Difference (arguments );
                        }
                        internal Difference difference ( Object exprA )
                        {
                           return Difference ( exprA );
                        }
/// <summary>
/// <para>Add a value to an array and return it as a set (an array with distinct values).</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setInsert('newBoots').run(conn, callback)
/// </code></example>
                        public SetInsert SetInsert ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetInsert (arguments );
                        }
                        internal SetInsert setInsert ( Object exprA )
                        {
                           return SetInsert ( exprA );
                        }
/// <summary>
/// <para>Intersect two arrays returning values that occur in both of them as a set (an array with
/// distinct values).</para>
/// </summary>
/// <example><para>Example: Check which pieces of equipment Iron Man has from a fixed list.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setIntersection(['newBoots', 'arc_reactor']).run(conn, callback)
/// </code></example>
                        public SetIntersection SetIntersection ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetIntersection (arguments );
                        }
                        internal SetIntersection setIntersection ( Object exprA )
                        {
                           return SetIntersection ( exprA );
                        }
/// <summary>
/// <para>Add a several values to an array and return it as a set (an array with distinct values).</para>
/// </summary>
/// <example><para>Example: Retrieve Iron Man's equipment list with the addition of some new boots and an arc reactor.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setUnion(['newBoots', 'arc_reactor']).run(conn, callback)
/// </code></example>
                        public SetUnion SetUnion ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetUnion (arguments );
                        }
                        internal SetUnion setUnion ( Object exprA )
                        {
                           return SetUnion ( exprA );
                        }
/// <summary>
/// <para>Remove the elements of one array from another and return them as a set (an array with
/// distinct values).</para>
/// </summary>
/// <example><para>Example: Check which pieces of equipment Iron Man has, excluding a fixed list.</para>
/// <code>r.table('marvel').get('IronMan')('equipment').setDifference(['newBoots', 'arc_reactor']).run(conn, callback)
/// </code></example>
                        public SetDifference SetDifference ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new SetDifference (arguments );
                        }
                        internal SetDifference setDifference ( Object exprA )
                        {
                           return SetDifference ( exprA );
                        }
/// <summary>
/// <para>Return the elements of a sequence within the specified range.</para>
/// </summary>
/// <example><para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
/// <code>r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback);
/// </code></example>
                        public Slice Slice ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Slice (arguments );
                        }
                        internal Slice slice ( Object exprA )
                        {
                           return Slice ( exprA );
                        }
/// <summary>
/// <para>Return the elements of a sequence within the specified range.</para>
/// </summary>
/// <example><para>Example: Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3-5.)</para>
/// <code>r.table('players').orderBy({index: 'age'}).slice(3,6).run(conn, callback);
/// </code></example>
                        public Slice Slice ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Slice (arguments );
                        }
                        internal Slice slice ( Object exprA, Object exprB )
                        {
                           return Slice ( exprA, exprB );
                        }
/// <summary>
/// <para>Skip a number of elements from the head of the sequence.</para>
/// </summary>
/// <example><para>Example: Here in conjunction with <a href="/api/javascript/order_by/">orderBy</a> we choose to ignore the most successful heroes.</para>
/// <code>r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
/// </code></example>
                        public Skip Skip ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Skip (arguments );
                        }
                        internal Skip skip ( Object exprA )
                        {
                           return Skip ( exprA );
                        }
/// <summary>
/// <para>End the sequence after the given number of elements.</para>
/// </summary>
/// <example><para>Example: Only so many can fit in our Pantheon of heroes.</para>
/// <code>r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
/// </code></example>
                        public Limit Limit ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Limit (arguments );
                        }
                        internal Limit limit ( Object exprA )
                        {
                           return Limit ( exprA );
                        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
                        public OffsetsOf OffsetsOf ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new OffsetsOf (arguments );
                        }
                        internal OffsetsOf offsetsOf ( Javascript js )
                        {
                           return OffsetsOf ( js );
                        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
                        public OffsetsOf OffsetsOf ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new OffsetsOf (arguments );
                        }
                        internal OffsetsOf offsetsOf ( Object exprA )
                        {
                           return OffsetsOf ( exprA );
                        }
/// <summary>
/// <para>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</para>
/// </summary>
/// <example><para>Example: Find the position of the letter 'c'.</para>
/// <code>r.expr(['a','b','c']).offsetsOf('c').run(conn, callback)
/// </code></example>
                        public OffsetsOf OffsetsOf ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new OffsetsOf (arguments );
                        }
                        internal OffsetsOf offsetsOf ( ReqlFunction1 func1 )
                        {
                           return OffsetsOf ( func1 );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Contains (arguments );
                        }
                        internal Contains contains (  )
                        {
                           return Contains (  );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js )
                        {
                           return Contains ( js );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA )
                        {
                           return Contains ( js, jsA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return Contains ( js, jsA, jsB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return Contains ( js, jsA, jsB, jsC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return Contains ( js, jsA, jsB, exprA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return Contains ( js, jsA, exprA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return Contains ( js, jsA, exprA, jsB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return Contains ( js, jsA, exprA, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Object exprA )
                        {
                           return Contains ( js, exprA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return Contains ( js, exprA, jsA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return Contains ( js, exprA, jsA, jsB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return Contains ( js, exprA, jsA, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Object exprB )
                        {
                           return Contains ( js, exprA, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return Contains ( js, exprA, exprB, jsA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return Contains ( js, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA )
                        {
                           return Contains ( exprA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Javascript js )
                        {
                           return Contains ( exprA, js );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return Contains ( exprA, js, jsA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return Contains ( exprA, js, jsA, jsB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return Contains ( exprA, js, jsA, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Object exprB )
                        {
                           return Contains ( exprA, js, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return Contains ( exprA, js, exprB, jsA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return Contains ( exprA, js, exprB, exprC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB )
                        {
                           return Contains ( exprA, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Javascript js )
                        {
                           return Contains ( exprA, exprB, js );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return Contains ( exprA, exprB, js, jsA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return Contains ( exprA, exprB, js, exprC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC )
                        {
                           return Contains ( exprA, exprB, exprC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return Contains ( exprA, exprB, exprC, js );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return Contains ( exprA, exprB, exprC, exprD );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return Contains ( exprA, exprB, exprC, func1 );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return Contains ( exprA, exprB, func1 );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return Contains ( exprA, exprB, func1, exprC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Contains ( exprA, exprB, func1, func1A );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1 )
                        {
                           return Contains ( exprA, func1 );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return Contains ( exprA, func1, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return Contains ( exprA, func1, exprB, exprC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return Contains ( exprA, func1, exprB, func1A );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Contains ( exprA, func1, func1A );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return Contains ( exprA, func1, func1A, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Contains ( exprA, func1, func1A, func1B );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1 )
                        {
                           return Contains ( func1 );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA )
                        {
                           return Contains ( func1, exprA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return Contains ( func1, exprA, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return Contains ( func1, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return Contains ( func1, exprA, exprB, func1A );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return Contains ( func1, exprA, func1A );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return Contains ( func1, exprA, func1A, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Contains ( func1, exprA, func1A, func1B );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Contains ( func1, func1A );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return Contains ( func1, func1A, exprA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return Contains ( func1, func1A, exprA, exprB );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return Contains ( func1, func1A, exprA, func1B );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Contains ( func1, func1A, func1B );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return Contains ( func1, func1A, func1B, exprA );
                        }
/// <summary>
/// <para>When called with values, returns <code>true</code> if a sequence contains all the
/// specified values.  When called with predicate functions, returns <code>true</code>
/// if for each predicate there exists at least one element of the stream
/// where that predicate returns <code>true</code>.</para>
/// </summary>
/// <example><para>Example: Has Iron Man ever fought Superman?</para>
/// <code>r.table('marvel').get('ironman')('opponents').contains('superman').run(conn, callback)
/// </code></example>
                        public Contains Contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new Contains (arguments );
                        }
                        internal Contains contains ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return Contains ( func1, func1A, func1B, func1C );
                        }
/// <summary>
/// <para>Get a single field from an object. If called on a sequence, gets that field from every
/// object in the sequence, skipping objects that lack it.</para>
/// </summary>
/// <example><para>Example: What was Iron Man's first appearance in a comic?</para>
/// <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
/// </code></example>
                        public GetField GetField ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new GetField (arguments );
                        }
                        internal GetField getField ( Object exprA )
                        {
                           return GetField ( exprA );
                        }
/// <summary>
/// <para>Get a single field from an object. If called on a sequence, gets that field from every
/// object in the sequence, skipping objects that lack it.</para>
/// </summary>
/// <example><para>Example: What was Iron Man's first appearance in a comic?</para>
/// <code>r.table('marvel').get('IronMan').getField('firstAppearance').run(conn, callback)
/// </code></example>
                        public GetField G ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new GetField (arguments );
                        }
                        internal GetField g ( Object exprA )
                        {
                           return G ( exprA );
                        }
/// <summary>
/// <para>Return an array containing all of an object's keys. Note that the keys will be sorted as described in <a href="/docs/data-types/#sorting-order">ReQL data types</a> (for strings, lexicographically).</para>
/// </summary>
/// <example><para>Example: Get all the keys from a table row.</para>
/// <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
/// 
/// r.table('users').get(1).keys().run(conn, callback);
/// // Result passed to callback
/// [ "id", "mail", "name" ]
/// </code></example>
                        public Keys Keys (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Keys (arguments );
                        }
                        internal Keys keys (  )
                        {
                           return Keys (  );
                        }
/// <summary>
/// <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
/// </summary>
/// <example><para>Example: Return the players who have won games.</para>
/// <code>r.table('players').hasFields('games_won').run(conn, callback)
/// </code></example>
                        public HasFields HasFields ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new HasFields (arguments );
                        }
/// <summary>
/// <para>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code>{'a': 1,'b': 2,'c': null}</code> has the fields <code>a</code> and <code>b</code>.</para>
/// </summary>
/// <example><para>Example: Return the players who have won games.</para>
/// <code>r.table('players').hasFields('games_won').run(conn, callback)
/// </code></example>
                            /// <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
                            public HasFields HasFields ( ICollection<string> args )
                            {
                                var arguments = new Arguments(this);
                                arguments.CoerceAndAddAll(args);
                                return new HasFields (arguments);
                            }
                        internal HasFields hasFields ( params object[] exprs )
                        {
                           return HasFields ( exprs );
                        }
/// <summary>
/// <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href="/api/javascript/has_fields/">hasFields</a> followed by <a href="/api/javascript/pluck/">pluck</a> on a sequence.</para>
/// </summary>
/// <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
/// <para>Existing table structure:</para>
/// <code>[
///     { 'id': 1, 'user': 'bob', 'email': 'bob@foo.com', 'posts': [ 1, 4, 5 ] },
///     { 'id': 2, 'user': 'george', 'email': 'george@foo.com' },
///     { 'id': 3, 'user': 'jane', 'email': 'jane@foo.com', 'posts': [ 2, 3, 6 ] }
/// ]
/// </code>
/// <para>Command and output:</para>
/// <code>&gt; r.table('users').withFields('id', 'user', 'posts').run(conn, callback)
/// // Result passed to callback
/// [
///     { 'id': 1, 'user': 'bob', 'posts': [ 1, 4, 5 ] },
///     { 'id': 3, 'user': 'jane', 'posts': [ 2, 3, 6 ] }
/// ]
/// </code></example>
                        public WithFields WithFields ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new WithFields (arguments );
                        }
/// <summary>
/// <para>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href="/api/javascript/has_fields/">hasFields</a> followed by <a href="/api/javascript/pluck/">pluck</a> on a sequence.</para>
/// </summary>
/// <example><para>Example: Get a list of users and their posts, excluding any users who have not made any posts.</para>
/// <para>Existing table structure:</para>
/// <code>[
///     { 'id': 1, 'user': 'bob', 'email': 'bob@foo.com', 'posts': [ 1, 4, 5 ] },
///     { 'id': 2, 'user': 'george', 'email': 'george@foo.com' },
///     { 'id': 3, 'user': 'jane', 'email': 'jane@foo.com', 'posts': [ 2, 3, 6 ] }
/// ]
/// </code>
/// <para>Command and output:</para>
/// <code>&gt; r.table('users').withFields('id', 'user', 'posts').run(conn, callback)
/// // Result passed to callback
/// [
///     { 'id': 1, 'user': 'bob', 'posts': [ 1, 4, 5 ] },
///     { 'id': 3, 'user': 'jane', 'posts': [ 2, 3, 6 ] }
/// ]
/// </code></example>
                            /// <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
                            public WithFields WithFields ( ICollection<string> args )
                            {
                                var arguments = new Arguments(this);
                                arguments.CoerceAndAddAll(args);
                                return new WithFields (arguments);
                            }
                        internal WithFields withFields ( params object[] exprs )
                        {
                           return WithFields ( exprs );
                        }
/// <summary>
/// <para>Plucks out one or more attributes from either an object or a sequence of objects
/// (projection).</para>
/// </summary>
/// <example><para>Example: We just need information about IronMan's reactor and not the rest of the
/// document.</para>
/// <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
/// </code></example>
                        public Pluck Pluck ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Pluck (arguments );
                        }
/// <summary>
/// <para>Plucks out one or more attributes from either an object or a sequence of objects
/// (projection).</para>
/// </summary>
/// <example><para>Example: We just need information about IronMan's reactor and not the rest of the
/// document.</para>
/// <code>r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn, callback)
/// </code></example>
                            /// <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
                            public Pluck Pluck ( ICollection<string> args )
                            {
                                var arguments = new Arguments(this);
                                arguments.CoerceAndAddAll(args);
                                return new Pluck (arguments);
                            }
                        internal Pluck pluck ( params object[] exprs )
                        {
                           return Pluck ( exprs );
                        }
/// <summary>
/// <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
/// the specified paths removed.</para>
/// </summary>
/// <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
/// out the list of IronMan's romantic conquests.</para>
/// <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
/// </code></example>
                        public Without Without ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Without (arguments );
                        }
/// <summary>
/// <para>The opposite of pluck; takes an object or a sequence of objects, and returns them with
/// the specified paths removed.</para>
/// </summary>
/// <example><para>Example: Since we don't need it for this computation we'll save bandwidth and leave
/// out the list of IronMan's romantic conquests.</para>
/// <code>r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)
/// </code></example>
                            /// <param name="args">Same as calling params object[] overload, except the collection is applied as object[] params.</param>
                            public Without Without ( ICollection<string> args )
                            {
                                var arguments = new Arguments(this);
                                arguments.CoerceAndAddAll(args);
                                return new Without (arguments);
                            }
                        internal Without without ( params object[] exprs )
                        {
                           return Without ( exprs );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Merge (arguments );
                        }
                        internal Merge merge (  )
                        {
                           return Merge (  );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js )
                        {
                           return Merge ( js );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA )
                        {
                           return Merge ( js, jsA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return Merge ( js, jsA, jsB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return Merge ( js, jsA, jsB, jsC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return Merge ( js, jsA, jsB, exprA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return Merge ( js, jsA, exprA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return Merge ( js, jsA, exprA, jsB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return Merge ( js, jsA, exprA, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Object exprA )
                        {
                           return Merge ( js, exprA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return Merge ( js, exprA, jsA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return Merge ( js, exprA, jsA, jsB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return Merge ( js, exprA, jsA, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Object exprB )
                        {
                           return Merge ( js, exprA, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return Merge ( js, exprA, exprB, jsA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return Merge ( js, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA )
                        {
                           return Merge ( exprA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Javascript js )
                        {
                           return Merge ( exprA, js );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return Merge ( exprA, js, jsA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return Merge ( exprA, js, jsA, jsB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return Merge ( exprA, js, jsA, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Object exprB )
                        {
                           return Merge ( exprA, js, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return Merge ( exprA, js, exprB, jsA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return Merge ( exprA, js, exprB, exprC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB )
                        {
                           return Merge ( exprA, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Javascript js )
                        {
                           return Merge ( exprA, exprB, js );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return Merge ( exprA, exprB, js, jsA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return Merge ( exprA, exprB, js, exprC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC )
                        {
                           return Merge ( exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return Merge ( exprA, exprB, exprC, js );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return Merge ( exprA, exprB, exprC, exprD );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return Merge ( exprA, exprB, exprC, func1 );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return Merge ( exprA, exprB, func1 );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return Merge ( exprA, exprB, func1, exprC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Merge ( exprA, exprB, func1, func1A );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1 )
                        {
                           return Merge ( exprA, func1 );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return Merge ( exprA, func1, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return Merge ( exprA, func1, exprB, exprC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return Merge ( exprA, func1, exprB, func1A );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Merge ( exprA, func1, func1A );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return Merge ( exprA, func1, func1A, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Merge ( exprA, func1, func1A, func1B );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1 )
                        {
                           return Merge ( func1 );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA )
                        {
                           return Merge ( func1, exprA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return Merge ( func1, exprA, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return Merge ( func1, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return Merge ( func1, exprA, exprB, func1A );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return Merge ( func1, exprA, func1A );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return Merge ( func1, exprA, func1A, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Merge ( func1, exprA, func1A, func1B );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Merge ( func1, func1A );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return Merge ( func1, func1A, exprA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return Merge ( func1, func1A, exprA, exprB );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return Merge ( func1, func1A, exprA, func1B );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Merge ( func1, func1A, func1B );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return Merge ( func1, func1A, func1B, exprA );
                        }
/// <summary>
/// <para>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code>merge</code> also accepts a subquery function that returns an object, which will be used similarly to a <a href="/api/javascript/map/">map</a> function.</para>
/// </summary>
/// <example><para>Example: Equip Thor for battle.</para>
/// <code>r.table('marvel').get('thor').merge(
///     r.table('equipment').get('hammer'),
///     r.table('equipment').get('pimento_sandwich')
/// ).run(conn, callback)
/// </code></example>
                        public Merge Merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new Merge (arguments );
                        }
                        internal Merge merge ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return Merge ( func1, func1A, func1B, func1C );
                        }
/// <summary>
/// <para>Get all documents between two keys. Accepts three optional arguments: <code>index</code>, <code>leftBound</code>, and <code>rightBound</code>. If <code>index</code> is set to the name of a secondary index, <code>between</code> will return all documents where that index's value is in the specified range (it uses the primary key by default). <code>leftBound</code> or <code>rightBound</code> may be set to <code>open</code> or <code>closed</code> to indicate whether or not to include that endpoint of the range (by default, <code>leftBound</code> is closed and <code>rightBound</code> is open).</para>
/// </summary>
/// <example><para>Example: Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</para>
/// <code>r.table('marvel').between(10, 20).run(conn, callback);
/// </code></example>
                        public Between Between ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Between (arguments );
                        }
                        internal Between between ( Object exprA, Object exprB )
                        {
                           return Between ( exprA, exprB );
                        }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
/// </summary>
/// <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1;
/// }).reduce(function(left, right) {
///     return left.add(right);
/// }).default(0).run(conn, callback);
/// </code>
/// <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
                        public Reduce Reduce ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Reduce (arguments );
                        }
                        internal Reduce reduce ( Javascript js )
                        {
                           return Reduce ( js );
                        }
/// <summary>
/// <para>Produce a single value from a sequence through repeated application of a reduction function.</para>
/// </summary>
/// <example><para>Example: Return the number of documents in the table <code>posts</code>.</para>
/// <code>r.table("posts").map(function(doc) {
///     return 1;
/// }).reduce(function(left, right) {
///     return left.add(right);
/// }).default(0).run(conn, callback);
/// </code>
/// <para>A shorter way to execute this query is to use <a href="/api/javascript/count">count</a>.</para></example>
                        public Reduce Reduce ( ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func2);
                            return new Reduce (arguments );
                        }
                        internal Reduce reduce ( ReqlFunction2 func2 )
                        {
                           return Reduce ( func2 );
                        }
/// <summary>
/// <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
/// </summary>
/// <example><para>Example: Concatenate words from a list.</para>
/// <code>r.table('words').orderBy('id').fold('', function (acc, word) {
///     return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
/// }).run(conn, callback);
/// </code>
/// <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
                        public Fold Fold ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Fold (arguments );
                        }
                        internal Fold fold ( Object exprA, Javascript js )
                        {
                           return Fold ( exprA, js );
                        }
/// <summary>
/// <para>Apply a function to a sequence in order, maintaining state via an accumulator. The <code>fold</code> command returns either a single value or a new sequence.</para>
/// </summary>
/// <example><para>Example: Concatenate words from a list.</para>
/// <code>r.table('words').orderBy('id').fold('', function (acc, word) {
///     return acc.add(r.branch(acc.eq(''), '', ', ')).add(word);
/// }).run(conn, callback);
/// </code>
/// <para>(This example could be implemented with <code>reduce</code>, but <code>fold</code> will preserve the order when <code>words</code> is a RethinkDB table or other stream, which is not guaranteed with <code>reduce</code>.)</para></example>
                        public Fold Fold ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new Fold (arguments );
                        }
                        internal Fold fold ( Object exprA, ReqlFunction2 func2 )
                        {
                           return Fold ( exprA, func2 );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
                        internal Map map ( Javascript js )
                        {
                           return Map ( js );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
                        internal Map map ( Object exprA, Javascript js )
                        {
                           return Map ( exprA, js );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
                        internal Map map ( Object exprA, Object exprB, Javascript js )
                        {
                           return Map ( exprA, exprB, js );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Map (arguments );
                        }
                        internal Map map ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return Map ( exprA, exprB, exprC, js );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func4);
                            return new Map (arguments );
                        }
                        internal Map map ( Object exprA, Object exprB, Object exprC, ReqlFunction4 func4 )
                        {
                           return Map ( exprA, exprB, exprC, func4 );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func3);
                            return new Map (arguments );
                        }
                        internal Map map ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                           return Map ( exprA, exprB, func3 );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new Map (arguments );
                        }
                        internal Map map ( Object exprA, ReqlFunction2 func2 )
                        {
                           return Map ( exprA, func2 );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( ReqlFunction0 func0 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func0);
                            return new Map (arguments );
                        }
                        internal Map map ( ReqlFunction0 func0 )
                        {
                           return Map ( func0 );
                        }
/// <summary>
/// <para>Transform each element of one or more sequences by applying a mapping function to them. If <code>map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</para>
/// </summary>
/// <example><para>Example: Return the first five squares.</para>
/// <code>r.expr([1, 2, 3, 4, 5]).map(function (val) {
///     return val.mul(val);
/// }).run(conn, callback);
/// // Result passed to callback
/// [1, 4, 9, 16, 25]
/// </code></example>
                        public Map Map ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Map (arguments );
                        }
                        internal Map map ( ReqlFunction1 func1 )
                        {
                           return Map ( func1 );
                        }
/// <summary>
/// <para>Return all the elements in a sequence for which the given predicate is true. The return value of <code>filter</code> will be the same as the input (sequence, stream, or array). Documents can be filtered in a variety of ways&mdash;ranges, nested values, boolean conditions, and the results of anonymous functions.</para>
/// </summary>
/// <example><para>Example: Get all users who are 30 years old.</para>
/// <code>r.table('users').filter({age: 30}).run(conn, callback);
/// </code>
/// <para>The predicate <code>{age: 30}</code> selects documents in the <code>users</code> table with an <code>age</code> field whose value is <code>30</code>. Documents with an <code>age</code> field set to any other value <em>or</em> with no <code>age</code> field present are skipped.</para></example>
                        public Filter Filter ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Filter (arguments );
                        }
                        internal Filter filter ( Javascript js )
                        {
                           return Filter ( js );
                        }
/// <summary>
/// <para>Return all the elements in a sequence for which the given predicate is true. The return value of <code>filter</code> will be the same as the input (sequence, stream, or array). Documents can be filtered in a variety of ways&mdash;ranges, nested values, boolean conditions, and the results of anonymous functions.</para>
/// </summary>
/// <example><para>Example: Get all users who are 30 years old.</para>
/// <code>r.table('users').filter({age: 30}).run(conn, callback);
/// </code>
/// <para>The predicate <code>{age: 30}</code> selects documents in the <code>users</code> table with an <code>age</code> field whose value is <code>30</code>. Documents with an <code>age</code> field set to any other value <em>or</em> with no <code>age</code> field present are skipped.</para></example>
                        public Filter Filter ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Filter (arguments );
                        }
                        internal Filter filter ( Object exprA )
                        {
                           return Filter ( exprA );
                        }
/// <summary>
/// <para>Return all the elements in a sequence for which the given predicate is true. The return value of <code>filter</code> will be the same as the input (sequence, stream, or array). Documents can be filtered in a variety of ways&mdash;ranges, nested values, boolean conditions, and the results of anonymous functions.</para>
/// </summary>
/// <example><para>Example: Get all users who are 30 years old.</para>
/// <code>r.table('users').filter({age: 30}).run(conn, callback);
/// </code>
/// <para>The predicate <code>{age: 30}</code> selects documents in the <code>users</code> table with an <code>age</code> field whose value is <code>30</code>. Documents with an <code>age</code> field set to any other value <em>or</em> with no <code>age</code> field present are skipped.</para></example>
                        public Filter Filter ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Filter (arguments );
                        }
                        internal Filter filter ( ReqlFunction1 func1 )
                        {
                           return Filter ( func1 );
                        }
/// <summary>
/// <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
/// </summary>
/// <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('defeatedMonsters')
/// }).run(conn, callback)
/// </code></example>
                        public ConcatMap ConcatMap ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new ConcatMap (arguments );
                        }
                        internal ConcatMap concatMap ( Javascript js )
                        {
                           return ConcatMap ( js );
                        }
/// <summary>
/// <para>Concatenate one or more elements into a single sequence using a mapping function.</para>
/// </summary>
/// <example><para>Example: Construct a sequence of all monsters defeated by Marvel heroes. The field "defeatedMonsters" is an array of one or more monster names.</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('defeatedMonsters')
/// }).run(conn, callback)
/// </code></example>
                        public ConcatMap ConcatMap ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new ConcatMap (arguments );
                        }
                        internal ConcatMap concatMap ( ReqlFunction1 func1 )
                        {
                           return ConcatMap ( func1 );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy (  )
                        {
                           return OrderBy (  );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js )
                        {
                           return OrderBy ( js );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA )
                        {
                           return OrderBy ( js, jsA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return OrderBy ( js, jsA, jsB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return OrderBy ( js, jsA, jsB, jsC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return OrderBy ( js, jsA, jsB, exprA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return OrderBy ( js, jsA, exprA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return OrderBy ( js, jsA, exprA, jsB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return OrderBy ( js, jsA, exprA, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA )
                        {
                           return OrderBy ( js, exprA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return OrderBy ( js, exprA, jsA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return OrderBy ( js, exprA, jsA, jsB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return OrderBy ( js, exprA, jsA, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Object exprB )
                        {
                           return OrderBy ( js, exprA, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return OrderBy ( js, exprA, exprB, jsA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return OrderBy ( js, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA )
                        {
                           return OrderBy ( exprA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js )
                        {
                           return OrderBy ( exprA, js );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return OrderBy ( exprA, js, jsA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return OrderBy ( exprA, js, jsA, jsB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return OrderBy ( exprA, js, jsA, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Object exprB )
                        {
                           return OrderBy ( exprA, js, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return OrderBy ( exprA, js, exprB, jsA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return OrderBy ( exprA, js, exprB, exprC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB )
                        {
                           return OrderBy ( exprA, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Javascript js )
                        {
                           return OrderBy ( exprA, exprB, js );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return OrderBy ( exprA, exprB, js, jsA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return OrderBy ( exprA, exprB, js, exprC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC )
                        {
                           return OrderBy ( exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return OrderBy ( exprA, exprB, exprC, js );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return OrderBy ( exprA, exprB, exprC, exprD );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return OrderBy ( exprA, exprB, exprC, func1 );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return OrderBy ( exprA, exprB, func1 );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return OrderBy ( exprA, exprB, func1, exprC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return OrderBy ( exprA, exprB, func1, func1A );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1 )
                        {
                           return OrderBy ( exprA, func1 );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return OrderBy ( exprA, func1, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return OrderBy ( exprA, func1, exprB, exprC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return OrderBy ( exprA, func1, exprB, func1A );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return OrderBy ( exprA, func1, func1A );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return OrderBy ( exprA, func1, func1A, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return OrderBy ( exprA, func1, func1A, func1B );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1 )
                        {
                           return OrderBy ( func1 );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA )
                        {
                           return OrderBy ( func1, exprA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return OrderBy ( func1, exprA, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return OrderBy ( func1, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return OrderBy ( func1, exprA, exprB, func1A );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return OrderBy ( func1, exprA, func1A );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return OrderBy ( func1, exprA, func1A, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return OrderBy ( func1, exprA, func1A, func1B );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return OrderBy ( func1, func1A );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return OrderBy ( func1, func1A, exprA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return OrderBy ( func1, func1A, exprA, exprB );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return OrderBy ( func1, func1A, exprA, func1B );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return OrderBy ( func1, func1A, func1B );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return OrderBy ( func1, func1A, func1B, exprA );
                        }
/// <summary>
/// <para>Sort the sequence by document values of the given key(s). To specify
/// the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>
/// (defaults to ascending).</para>
/// </summary>
/// <example><para>Example: Order all the posts using the index <code>date</code>.</para>
/// <code>r.table('posts').orderBy({index: 'date'}).run(conn, callback);
/// </code></example>
                        public OrderBy OrderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new OrderBy (arguments );
                        }
                        internal OrderBy orderBy ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return OrderBy ( func1, func1A, func1B, func1C );
                        }
/// <summary>
/// <para>Removes duplicates from elements in a sequence.</para>
/// </summary>
/// <example><para>Example: Which unique villains have been vanquished by Marvel heroes?</para>
/// <code>r.table('marvel').concatMap(function(hero) {
///     return hero('villainList')
/// }).distinct().run(conn, callback)
/// </code></example>
                        public Distinct Distinct (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Distinct (arguments );
                        }
                        internal Distinct distinct (  )
                        {
                           return Distinct (  );
                        }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
/// </summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                        public Count Count (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Count (arguments );
                        }
                        internal Count count (  )
                        {
                           return Count (  );
                        }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
/// </summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                        public Count Count ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Count (arguments );
                        }
                        internal Count count ( Javascript js )
                        {
                           return Count ( js );
                        }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
/// </summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                        public Count Count ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Count (arguments );
                        }
                        internal Count count ( Object exprA )
                        {
                           return Count ( exprA );
                        }
/// <summary>
/// <para>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</para>
/// </summary>
/// <example><para>Example: Count the number of users.</para>
/// <code>r.table('users').count().run(conn, callback);
/// </code></example>
                        public Count Count ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Count (arguments );
                        }
                        internal Count count ( ReqlFunction1 func1 )
                        {
                           return Count ( func1 );
                        }
/// <summary>
/// <para>Test if a sequence is empty.</para>
/// </summary>
/// <example><para>Example: Are there any documents in the marvel table?</para>
/// <code>r.table('marvel').isEmpty().run(conn, callback)
/// </code></example>
                        public IsEmpty IsEmpty (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new IsEmpty (arguments );
                        }
                        internal IsEmpty isEmpty (  )
                        {
                           return IsEmpty (  );
                        }
/// <summary>
/// <para>Merge two or more sequences.</para>
/// </summary>
/// <example><para>Example: Construct a stream of all heroes.</para>
/// <code>r.table('marvel').union(r.table('dc')).run(conn, callback);
/// </code></example>
                        public Union Union ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Union (arguments );
                        }
                        internal Union union ( params object[] exprs )
                        {
                           return Union ( exprs );
                        }
/// <summary>
/// <para>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</para>
/// </summary>
/// <example><para>Example: Select the second element in the array.</para>
/// <code>r.expr([1,2,3]).nth(1).run(conn, callback)
/// r.expr([1,2,3])(1).run(conn, callback)
/// </code></example>
                        public Nth Nth ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Nth (arguments );
                        }
                        internal Nth nth ( Object exprA )
                        {
                           return Nth ( exprA );
                        }
/// <summary>
/// <para>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</para>
/// </summary>
/// <example><para>Example: What was Iron Man's first appearance in a comic?</para>
/// <code>r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)
/// </code></example>
                        public Bracket Bracket ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Bracket (arguments );
                        }
                        internal Bracket bracket ( Object exprA )
                        {
                           return Bracket ( exprA );
                        }
/// <summary>
/// <para>Returns an inner join of two sequences.</para>
/// </summary>
/// <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
/// <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).zip().run(conn, callback)
/// </code></example>
                        public InnerJoin InnerJoin ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new InnerJoin (arguments );
                        }
                        internal InnerJoin innerJoin ( Object exprA, Javascript js )
                        {
                           return InnerJoin ( exprA, js );
                        }
/// <summary>
/// <para>Returns an inner join of two sequences.</para>
/// </summary>
/// <example><para>Example: Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</para>
/// <code>r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).zip().run(conn, callback)
/// </code></example>
                        public InnerJoin InnerJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new InnerJoin (arguments );
                        }
                        internal InnerJoin innerJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                           return InnerJoin ( exprA, func2 );
                        }
/// <summary>
/// <para>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href="/api/javascript/zip">zip</a> to combine the left and right results.</para>
/// </summary>
/// <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
/// <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).run(conn, callback)
/// </code>
/// <para>(Compare this to an <a href="/api/javascript/inner_join">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</para></example>
                        public OuterJoin OuterJoin ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new OuterJoin (arguments );
                        }
                        internal OuterJoin outerJoin ( Object exprA, Javascript js )
                        {
                           return OuterJoin ( exprA, js );
                        }
/// <summary>
/// <para>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href="/api/javascript/zip">zip</a> to combine the left and right results.</para>
/// </summary>
/// <example><para>Example: Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</para>
/// <code>r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {
///     return marvelRow('strength').lt(dcRow('strength'))
/// }).run(conn, callback)
/// </code>
/// <para>(Compare this to an <a href="/api/javascript/inner_join">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</para></example>
                        public OuterJoin OuterJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new OuterJoin (arguments );
                        }
                        internal OuterJoin outerJoin ( Object exprA, ReqlFunction2 func2 )
                        {
                           return OuterJoin ( exprA, func2 );
                        }
/// <summary>
/// <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
/// </summary>
/// <example></example>
                        public EqJoin EqJoin ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new EqJoin (arguments );
                        }
                        internal EqJoin eqJoin ( Javascript js, Object exprA )
                        {
                           return EqJoin ( js, exprA );
                        }
/// <summary>
/// <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
/// </summary>
/// <example></example>
                        public EqJoin EqJoin ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new EqJoin (arguments );
                        }
                        internal EqJoin eqJoin ( Object exprA, Object exprB )
                        {
                           return EqJoin ( exprA, exprB );
                        }
/// <summary>
/// <para>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code>eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field's value exists in the specified index on the right-hand side.</para>
/// </summary>
/// <example></example>
                        public EqJoin EqJoin ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new EqJoin (arguments );
                        }
                        internal EqJoin eqJoin ( ReqlFunction1 func1, Object exprA )
                        {
                           return EqJoin ( func1, exprA );
                        }
/// <summary>
/// <para>Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.</para>
/// </summary>
/// <example><para>Example: 'zips up' the sequence by merging the left and right fields produced by a join.</para>
/// <code>r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))
///     .zip().run(conn, callback)
/// </code></example>
                        public Zip Zip (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Zip (arguments );
                        }
                        internal Zip zip (  )
                        {
                           return Zip (  );
                        }
/// <summary>
/// <para>Insert a value in to an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Hulk decides to join the avengers.</para>
/// <code>r.expr(["Iron Man", "Spider-Man"]).insertAt(1, "Hulk").run(conn, callback)
/// </code></example>
                        public InsertAt InsertAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new InsertAt (arguments );
                        }
                        internal InsertAt insertAt ( Object exprA, Object exprB )
                        {
                           return InsertAt ( exprA, exprB );
                        }
/// <summary>
/// <para>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code>deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href="/api/javascript/delete">delete</a> command.)</para>
/// </summary>
/// <example><para>Example: Delete the second element of an array.</para>
/// <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
/// // result passed to callback
/// ['a', 'c', 'd', 'e', 'f']
/// </code></example>
                        public DeleteAt DeleteAt ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new DeleteAt (arguments );
                        }
                        internal DeleteAt deleteAt ( Object exprA )
                        {
                           return DeleteAt ( exprA );
                        }
/// <summary>
/// <para>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code>deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href="/api/javascript/delete">delete</a> command.)</para>
/// </summary>
/// <example><para>Example: Delete the second element of an array.</para>
/// <code>&gt; r(['a','b','c','d','e','f']).deleteAt(1).run(conn, callback)
/// // result passed to callback
/// ['a', 'c', 'd', 'e', 'f']
/// </code></example>
                        public DeleteAt DeleteAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new DeleteAt (arguments );
                        }
                        internal DeleteAt deleteAt ( Object exprA, Object exprB )
                        {
                           return DeleteAt ( exprA, exprB );
                        }
/// <summary>
/// <para>Change a value in an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Bruce Banner hulks out.</para>
/// <code>r.expr(["Iron Man", "Bruce", "Spider-Man"]).changeAt(1, "Hulk").run(conn, callback)
/// </code></example>
                        public ChangeAt ChangeAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new ChangeAt (arguments );
                        }
                        internal ChangeAt changeAt ( Object exprA, Object exprB )
                        {
                           return ChangeAt ( exprA, exprB );
                        }
/// <summary>
/// <para>Insert several values in to an array at a given index. Returns the modified array.</para>
/// </summary>
/// <example><para>Example: Hulk and Thor decide to join the avengers.</para>
/// <code>r.expr(["Iron Man", "Spider-Man"]).spliceAt(1, ["Hulk", "Thor"]).run(conn, callback)
/// </code></example>
                        public SpliceAt SpliceAt ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new SpliceAt (arguments );
                        }
                        internal SpliceAt spliceAt ( Object exprA, Object exprB )
                        {
                           return SpliceAt ( exprA, exprB );
                        }
/// <summary>
/// <para>Convert a value of one type into another.</para>
/// </summary>
/// <example><para>Example: Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</para>
/// <code>r.table('posts').map(function (post) {
///     return post.merge({ comments: r.table('comments').getAll(post('id'), {index: 'postId'}).coerceTo('array')});
/// }).run(conn, callback)
/// </code></example>
                        public CoerceTo CoerceTo ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new CoerceTo (arguments );
                        }
                        internal CoerceTo coerceTo ( Object exprA )
                        {
                           return CoerceTo ( exprA );
                        }
/// <summary>
/// <para>Gets the type of a ReQL query's return value.</para>
/// </summary>
/// <example><para>Example: Get the type of a string.</para>
/// <code>r.expr("foo").typeOf().run(conn, callback);
/// // Result passed to callback
/// "STRING"
/// </code></example>
                        public TypeOf TypeOf (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new TypeOf (arguments );
                        }
                        internal TypeOf typeOf (  )
                        {
                           return TypeOf (  );
                        }
/// <summary>
/// <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
/// </summary>
/// <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
                        public Update Update ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Update (arguments );
                        }
                        internal Update update ( Javascript js )
                        {
                           return Update ( js );
                        }
/// <summary>
/// <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
/// </summary>
/// <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
                        public Update Update ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Update (arguments );
                        }
                        internal Update update ( Object exprA )
                        {
                           return Update ( exprA );
                        }
/// <summary>
/// <para>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</para>
/// </summary>
/// <example><para>Example: Update the status of the post with <code>id</code> of <code>1</code> to <code>published</code>.</para>
/// <code>r.table("posts").get(1).update({status: "published"}).run(conn, callback)
/// </code></example>
                        public Update Update ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Update (arguments );
                        }
                        internal Update update ( ReqlFunction1 func1 )
                        {
                           return Update ( func1 );
                        }
/// <summary>
/// <para>Delete one or more documents from a table.</para>
/// </summary>
/// <example><para>Example: Delete a single document from the table <code>comments</code>.</para>
/// <code>r.table("comments").get("7eab9e63-73f1-4f33-8ce4-95cbea626f59").delete().run(conn, callback)
/// </code></example>
                        public Delete Delete (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Delete (arguments );
                        }
                        internal Delete delete (  )
                        {
                           return Delete (  );
                        }
/// <summary>
/// <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
/// and replaces the original document with the new one. The new document must
/// have the same primary key as the original document.</para>
/// </summary>
/// <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
/// <code>r.table("posts").get(1).replace({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Aleas jacta est",
///     status: "draft"
/// }).run(conn, callback)
/// </code></example>
                        public Replace Replace ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Replace (arguments );
                        }
                        internal Replace replace ( Javascript js )
                        {
                           return Replace ( js );
                        }
/// <summary>
/// <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
/// and replaces the original document with the new one. The new document must
/// have the same primary key as the original document.</para>
/// </summary>
/// <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
/// <code>r.table("posts").get(1).replace({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Aleas jacta est",
///     status: "draft"
/// }).run(conn, callback)
/// </code></example>
                        public Replace Replace ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Replace (arguments );
                        }
                        internal Replace replace ( Object exprA )
                        {
                           return Replace ( exprA );
                        }
/// <summary>
/// <para>Replace documents in a table. Accepts a JSON document or a ReQL expression,
/// and replaces the original document with the new one. The new document must
/// have the same primary key as the original document.</para>
/// </summary>
/// <example><para>Example: Replace the document with the primary key <code>1</code>.</para>
/// <code>r.table("posts").get(1).replace({
///     id: 1,
///     title: "Lorem ipsum",
///     content: "Aleas jacta est",
///     status: "draft"
/// }).run(conn, callback)
/// </code></example>
                        public Replace Replace ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Replace (arguments );
                        }
                        internal Replace replace ( ReqlFunction1 func1 )
                        {
                           return Replace ( func1 );
                        }
                        public Funcall Do_ ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Funcall (arguments );
                        }
                        internal Funcall do_ ( Javascript js )
                        {
                           return Do_ ( js );
                        }
                        public Funcall Do_ ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Funcall (arguments );
                        }
                        internal Funcall do_ ( Object exprA, Javascript js )
                        {
                           return Do_ ( exprA, js );
                        }
                        public Funcall Do_ ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Funcall (arguments );
                        }
                        internal Funcall do_ ( Object exprA, Object exprB, Javascript js )
                        {
                           return Do_ ( exprA, exprB, js );
                        }
                        public Funcall Do_ ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func3);
                            return new Funcall (arguments );
                        }
                        internal Funcall do_ ( Object exprA, Object exprB, ReqlFunction3 func3 )
                        {
                           return Do_ ( exprA, exprB, func3 );
                        }
                        public Funcall Do_ ( Object exprA, ReqlFunction2 func2 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func2);
                            return new Funcall (arguments );
                        }
                        internal Funcall do_ ( Object exprA, ReqlFunction2 func2 )
                        {
                           return Do_ ( exprA, func2 );
                        }
                        public Funcall Do_ ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Funcall (arguments );
                        }
                        internal Funcall do_ ( params object[] exprs )
                        {
                           return Do_ ( exprs );
                        }
                        public Funcall Do_ ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Funcall (arguments );
                        }
                        internal Funcall do_ ( ReqlFunction1 func1 )
                        {
                           return Do_ ( func1 );
                        }
/// <summary>
/// <para>Compute the logical "or" of one or more values.</para>
/// </summary>
/// <example><para>Example: Return whether either <code>a</code> or <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).or(b).run(conn, callback);
/// // result passed to callback
/// true
/// </code></example>
                        public Or Or ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new Or (arguments );
                        }
                        internal Or or ( params object[] exprs )
                        {
                           return Or ( exprs );
                        }
/// <summary>
/// <para>Compute the logical "and" of one or more values.</para>
/// </summary>
/// <example><para>Example: Return whether both <code>a</code> and <code>b</code> evaluate to true.</para>
/// <code>var a = true, b = false;
/// r.expr(a).and(b).run(conn, callback);
/// // result passed to callback
/// false
/// </code></example>
                        public And And ( params object[] exprs )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAddAll(exprs);
                            return new And (arguments );
                        }
                        internal And and ( params object[] exprs )
                        {
                           return And ( exprs );
                        }
/// <summary>
/// <para>Loop over a sequence, evaluating the given write query for each element.</para>
/// </summary>
/// <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
/// <code>r.table('marvel').forEach(function(hero) {
///     return r.table('villains').get(hero('villainDefeated')).delete()
/// }).run(conn, callback)
/// </code></example>
                        public ForEach ForEach ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new ForEach (arguments );
                        }
                        internal ForEach forEach ( Javascript js )
                        {
                           return ForEach ( js );
                        }
/// <summary>
/// <para>Loop over a sequence, evaluating the given write query for each element.</para>
/// </summary>
/// <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
/// <code>r.table('marvel').forEach(function(hero) {
///     return r.table('villains').get(hero('villainDefeated')).delete()
/// }).run(conn, callback)
/// </code></example>
                        public ForEach ForEach ( ReqlFunction0 func0 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func0);
                            return new ForEach (arguments );
                        }
                        internal ForEach forEach ( ReqlFunction0 func0 )
                        {
                           return ForEach ( func0 );
                        }
/// <summary>
/// <para>Loop over a sequence, evaluating the given write query for each element.</para>
/// </summary>
/// <example><para>Example: Now that our heroes have defeated their villains, we can safely remove them from the villain table.</para>
/// <code>r.table('marvel').forEach(function(hero) {
///     return r.table('villains').get(hero('villainDefeated')).delete()
/// }).run(conn, callback)
/// </code></example>
                        public ForEach ForEach ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new ForEach (arguments );
                        }
                        internal ForEach forEach ( ReqlFunction1 func1 )
                        {
                           return ForEach ( func1 );
                        }
/// <summary>
/// <para>Get information about a ReQL value.</para>
/// </summary>
/// <example><para>Example: Get information about a table such as primary key, or cache size.</para>
/// <code>r.table('marvel').info().run(conn, callback)
/// </code></example>
                        public Info Info (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Info (arguments );
                        }
                        internal Info info (  )
                        {
                           return Info (  );
                        }
/// <summary>
/// <para>Matches against a regular expression. If there is a match, returns an object with the fields:</para>
/// <ul>
/// <li><code>str</code>: The matched string</li>
/// <li><code>start</code>: The matched string's start</li>
/// <li><code>end</code>: The matched string's end</li>
/// <li><code>groups</code>: The capture groups defined with parentheses</li>
/// </ul>
/// <para>If no match is found, returns <code>null</code>.</para>
/// </summary>
/// <example><para>Example: Get all users whose name starts with "A". Because <code>null</code> evaluates to <code>false</code> in
/// <a href="/api/javascript/filter/">filter</a>, you can just use the result of <code>match</code> for the predicate.</para>
/// <code>r.table('users').filter(function(doc){
///     return doc('name').match("^A")
/// }).run(conn, callback)
/// </code></example>
                        public Match Match ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Match (arguments );
                        }
                        internal Match match ( Object exprA )
                        {
                           return Match ( exprA );
                        }
/// <summary>
/// <para>Uppercases a string.</para>
/// </summary>
/// <example><para>Example:</para>
/// <code>r.expr("Sentence about LaTeX.").upcase().run(conn, callback)
/// </code>
/// <para>Result:</para>
/// <code>"SENTENCE ABOUT LATEX."
/// </code>
/// <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
                        public Upcase Upcase (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Upcase (arguments );
                        }
                        internal Upcase upcase (  )
                        {
                           return Upcase (  );
                        }
/// <summary>
/// <para>Lowercases a string.</para>
/// </summary>
/// <example><para>Example:</para>
/// <code>r.expr("Sentence about LaTeX.").downcase().run(conn, callback)
/// </code>
/// <para>Result:</para>
/// <code>"sentence about latex."
/// </code>
/// <para>Note: <code>upcase</code> and <code>downcase</code> only affect ASCII characters.</para></example>
                        public Downcase Downcase (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Downcase (arguments );
                        }
                        internal Downcase downcase (  )
                        {
                           return Downcase (  );
                        }
/// <summary>
/// <para>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</para>
/// </summary>
/// <example><para>Example: Select 3 random heroes.</para>
/// <code>r.table('marvel').sample(3).run(conn, callback)
/// </code></example>
                        public Sample Sample ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Sample (arguments );
                        }
                        internal Sample sample ( Object exprA )
                        {
                           return Sample ( exprA );
                        }
/// <summary>
/// <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
/// </summary>
/// <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
/// In the case where the author field is missing or <code>null</code>, we want to retrieve the string
/// <code>Anonymous</code>.</para>
/// <code>r.table("posts").map(function (post) {
///     return {
///         title: post("title"),
///         author: post("author").default("Anonymous")
///     }
/// }).run(conn, callback);
/// </code></example>
                        public Default Default_ ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Default (arguments );
                        }
                        internal Default default_ ( Javascript js )
                        {
                           return Default_ ( js );
                        }
/// <summary>
/// <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
/// </summary>
/// <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
/// In the case where the author field is missing or <code>null</code>, we want to retrieve the string
/// <code>Anonymous</code>.</para>
/// <code>r.table("posts").map(function (post) {
///     return {
///         title: post("title"),
///         author: post("author").default("Anonymous")
///     }
/// }).run(conn, callback);
/// </code></example>
                        public Default Default_ ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Default (arguments );
                        }
                        internal Default default_ ( Object exprA )
                        {
                           return Default_ ( exprA );
                        }
/// <summary>
/// <para>Provide a default value in case of non-existence errors. The <code>default</code> command evaluates its first argument (the value it's chained to). If that argument returns <code>null</code> or a non-existence error is thrown in evaluation, then <code>default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</para>
/// </summary>
/// <example><para>Example: Retrieve the titles and authors of the table <code>posts</code>.
/// In the case where the author field is missing or <code>null</code>, we want to retrieve the string
/// <code>Anonymous</code>.</para>
/// <code>r.table("posts").map(function (post) {
///     return {
///         title: post("title"),
///         author: post("author").default("Anonymous")
///     }
/// }).run(conn, callback);
/// </code></example>
                        public Default Default_ ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Default (arguments );
                        }
                        internal Default default_ ( ReqlFunction1 func1 )
                        {
                           return Default_ ( func1 );
                        }
/// <summary>
/// <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
/// </summary>
/// <example><para>Example: Get a ReQL document as a JSON string.</para>
/// <code>&gt; r.table('hero').get(1).toJSON()
/// // result returned to callback
/// '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
/// </code></example>
                        public ToJsonString ToJsonString (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToJsonString (arguments );
                        }
                        internal ToJsonString toJsonString (  )
                        {
                           return ToJsonString (  );
                        }
/// <summary>
/// <para>Convert a ReQL value or object to a JSON string. You may use either <code>toJsonString</code> or <code>toJSON</code>.</para>
/// </summary>
/// <example><para>Example: Get a ReQL document as a JSON string.</para>
/// <code>&gt; r.table('hero').get(1).toJSON()
/// // result returned to callback
/// '{"id": 1, "name": "Batman", "city": "Gotham", "powers": ["martial arts", "cinematic entrances"]}'
/// </code></example>
                        public ToJsonString ToJson (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToJsonString (arguments );
                        }
                        internal ToJsonString toJson (  )
                        {
                           return ToJson (  );
                        }
/// <summary>
/// <para>Convert a time object to a string in ISO 8601 format.</para>
/// </summary>
/// <example><para>Example: Return the current ISO 8601 time.</para>
/// <code>r.now().toISO8601().run(conn, callback)
/// // Result passed to callback
/// "2015-04-20T18:37:52.690+00:00"
/// </code></example>
                        public ToIso8601 ToIso8601 (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToIso8601 (arguments );
                        }
                        internal ToIso8601 toIso8601 (  )
                        {
                           return ToIso8601 (  );
                        }
/// <summary>
/// <para>Convert a time object to its epoch time.</para>
/// </summary>
/// <example><para>Example: Return the current time in seconds since the Unix Epoch with millisecond-precision.</para>
/// <code>r.now().toEpochTime()
/// </code></example>
                        public ToEpochTime ToEpochTime (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToEpochTime (arguments );
                        }
                        internal ToEpochTime toEpochTime (  )
                        {
                           return ToEpochTime (  );
                        }
/// <summary>
/// <para>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</para>
/// </summary>
/// <example><para>Example: Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</para>
/// <code>r.now().inTimezone('-08:00').hours().run(conn, callback)
/// </code></example>
                        public InTimezone InTimezone ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new InTimezone (arguments );
                        }
                        internal InTimezone inTimezone ( Object exprA )
                        {
                           return InTimezone ( exprA );
                        }
/// <summary>
/// <para>Return whether a time is between two other times.</para>
/// </summary>
/// <example><para>Example: Retrieve all the posts that were posted between December 1st, 2013
/// (inclusive) and December 10th, 2013 (exclusive).</para>
/// <code>r.table("posts").filter(
///     r.row('date').during(r.time(2013, 12, 1, "Z"), r.time(2013, 12, 10, "Z"))
/// ).run(conn, callback)
/// </code></example>
                        public During During ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new During (arguments );
                        }
                        internal During during ( Object exprA, Object exprB )
                        {
                           return During ( exprA, exprB );
                        }
/// <summary>
/// <para>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</para>
/// </summary>
/// <example><para>Example: Retrieve all the users whose birthday is today.</para>
/// <code>r.table("users").filter(function(user) {
///     return user("birthdate").date().eq(r.now().date())
/// }).run(conn, callback)
/// </code></example>
                        public Date Date (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Date (arguments );
                        }
                        internal Date date (  )
                        {
                           return Date (  );
                        }
/// <summary>
/// <para>Return the number of seconds elapsed since the beginning of the day stored in the time object.</para>
/// </summary>
/// <example><para>Example: Retrieve posts that were submitted before noon.</para>
/// <code>r.table("posts").filter(
///     r.row("date").timeOfDay().le(12*60*60)
/// ).run(conn, callback)
/// </code></example>
                        public TimeOfDay TimeOfDay (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new TimeOfDay (arguments );
                        }
                        internal TimeOfDay timeOfDay (  )
                        {
                           return TimeOfDay (  );
                        }
/// <summary>
/// <para>Return the timezone of the time object.</para>
/// </summary>
/// <example><para>Example: Return all the users in the "-07:00" timezone.</para>
/// <code>r.table("users").filter( function(user) {
///     return user("subscriptionDate").timezone().eq("-07:00")
/// })
/// </code></example>
                        public Timezone Timezone (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Timezone (arguments );
                        }
                        internal Timezone timezone (  )
                        {
                           return Timezone (  );
                        }
/// <summary>
/// <para>Return the year of a time object.</para>
/// </summary>
/// <example><para>Example: Retrieve all the users born in 1986.</para>
/// <code>r.table("users").filter(function(user) {
///     return user("birthdate").year().eq(1986)
/// }).run(conn, callback)
/// </code></example>
                        public Year Year (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Year (arguments );
                        }
                        internal Year year (  )
                        {
                           return Year (  );
                        }
/// <summary>
/// <para>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</para>
/// </summary>
/// <example><para>Example: Retrieve all the users who were born in November.</para>
/// <code>r.table("users").filter(
///     r.row("birthdate").month().eq(11)
/// )
/// </code></example>
                        public Month Month (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Month (arguments );
                        }
                        internal Month month (  )
                        {
                           return Month (  );
                        }
/// <summary>
/// <para>Return the day of a time object as a number between 1 and 31.</para>
/// </summary>
/// <example><para>Example: Return the users born on the 24th of any month.</para>
/// <code>r.table("users").filter(
///     r.row("birthdate").day().eq(24)
/// ).run(conn, callback)
/// </code></example>
                        public Day Day (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Day (arguments );
                        }
                        internal Day day (  )
                        {
                           return Day (  );
                        }
/// <summary>
/// <para>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</para>
/// </summary>
/// <example><para>Example: Return today's day of week.</para>
/// <code>r.now().dayOfWeek().run(conn, callback)
/// </code></example>
                        public DayOfWeek DayOfWeek (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new DayOfWeek (arguments );
                        }
                        internal DayOfWeek dayOfWeek (  )
                        {
                           return DayOfWeek (  );
                        }
/// <summary>
/// <para>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</para>
/// </summary>
/// <example><para>Example: Retrieve all the users who were born the first day of a year.</para>
/// <code>r.table("users").filter(
///     r.row("birthdate").dayOfYear().eq(1)
/// )
/// </code></example>
                        public DayOfYear DayOfYear (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new DayOfYear (arguments );
                        }
                        internal DayOfYear dayOfYear (  )
                        {
                           return DayOfYear (  );
                        }
/// <summary>
/// <para>Return the hour in a time object as a number between 0 and 23.</para>
/// </summary>
/// <example><para>Example: Return all the posts submitted after midnight and before 4am.</para>
/// <code>r.table("posts").filter(function(post) {
///     return post("date").hours().lt(4)
/// })
/// </code></example>
                        public Hours Hours (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Hours (arguments );
                        }
                        internal Hours hours (  )
                        {
                           return Hours (  );
                        }
/// <summary>
/// <para>Return the minute in a time object as a number between 0 and 59.</para>
/// </summary>
/// <example><para>Example: Return all the posts submitted during the first 10 minutes of every hour.</para>
/// <code>r.table("posts").filter(function(post) {
///     return post("date").minutes().lt(10)
/// })
/// </code></example>
                        public Minutes Minutes (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Minutes (arguments );
                        }
                        internal Minutes minutes (  )
                        {
                           return Minutes (  );
                        }
/// <summary>
/// <para>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</para>
/// </summary>
/// <example><para>Example: Return the post submitted during the first 30 seconds of every minute.</para>
/// <code>r.table("posts").filter(function(post) {
///     return post("date").seconds().lt(30)
/// })
/// </code></example>
                        public Seconds Seconds (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Seconds (arguments );
                        }
                        internal Seconds seconds (  )
                        {
                           return Seconds (  );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Group (arguments );
                        }
                        internal Group group (  )
                        {
                           return Group (  );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js )
                        {
                           return Group ( js );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Javascript jsA )
                        {
                           return Group ( js, jsA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return Group ( js, jsA, jsB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(jsC);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Javascript jsB, Javascript jsC )
                        {
                           return Group ( js, jsA, jsB, jsC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Javascript jsB, Object exprA )
                        {
                           return Group ( js, jsA, jsB, exprA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Object exprA )
                        {
                           return Group ( js, jsA, exprA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Object exprA, Javascript jsB )
                        {
                           return Group ( js, jsA, exprA, jsB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Javascript jsA, Object exprA, Object exprB )
                        {
                           return Group ( js, jsA, exprA, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Object exprA )
                        {
                           return Group ( js, exprA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Object exprA, Javascript jsA )
                        {
                           return Group ( js, exprA, jsA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Object exprA, Javascript jsA, Javascript jsB )
                        {
                           return Group ( js, exprA, jsA, jsB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Object exprA, Javascript jsA, Object exprB )
                        {
                           return Group ( js, exprA, jsA, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Object exprA, Object exprB )
                        {
                           return Group ( js, exprA, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Object exprA, Object exprB, Javascript jsA )
                        {
                           return Group ( js, exprA, exprB, jsA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
                        internal Group group ( Javascript js, Object exprA, Object exprB, Object exprC )
                        {
                           return Group ( js, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA )
                        {
                           return Group ( exprA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Javascript js )
                        {
                           return Group ( exprA, js );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Javascript js, Javascript jsA )
                        {
                           return Group ( exprA, js, jsA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(jsB);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Javascript js, Javascript jsA, Javascript jsB )
                        {
                           return Group ( exprA, js, jsA, jsB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Javascript js, Javascript jsA, Object exprB )
                        {
                           return Group ( exprA, js, jsA, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Javascript js, Object exprB )
                        {
                           return Group ( exprA, js, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Javascript js, Object exprB, Javascript jsA )
                        {
                           return Group ( exprA, js, exprB, jsA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Javascript js, Object exprB, Object exprC )
                        {
                           return Group ( exprA, js, exprB, exprC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB )
                        {
                           return Group ( exprA, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, Javascript js )
                        {
                           return Group ( exprA, exprB, js );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(jsA);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, Javascript js, Javascript jsA )
                        {
                           return Group ( exprA, exprB, js, jsA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(js);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, Javascript js, Object exprC )
                        {
                           return Group ( exprA, exprB, js, exprC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC )
                        {
                           return Group ( exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(js);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC, Javascript js )
                        {
                           return Group ( exprA, exprB, exprC, js );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(exprD);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC, Object exprD )
                        {
                           return Group ( exprA, exprB, exprC, exprD );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, Object exprC, ReqlFunction1 func1 )
                        {
                           return Group ( exprA, exprB, exprC, func1 );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, ReqlFunction1 func1 )
                        {
                           return Group ( exprA, exprB, func1 );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, ReqlFunction1 func1, Object exprC )
                        {
                           return Group ( exprA, exprB, func1, exprC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, Object exprB, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Group ( exprA, exprB, func1, func1A );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1 )
                        {
                           return Group ( exprA, func1 );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, Object exprB )
                        {
                           return Group ( exprA, func1, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, Object exprB, Object exprC )
                        {
                           return Group ( exprA, func1, exprB, exprC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, Object exprB, ReqlFunction1 func1A )
                        {
                           return Group ( exprA, func1, exprB, func1A );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Group ( exprA, func1, func1A );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, Object exprB )
                        {
                           return Group ( exprA, func1, func1A, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
                        internal Group group ( Object exprA, ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Group ( exprA, func1, func1A, func1B );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1 )
                        {
                           return Group ( func1 );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA )
                        {
                           return Group ( func1, exprA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, Object exprB )
                        {
                           return Group ( func1, exprA, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(exprC);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, Object exprB, Object exprC )
                        {
                           return Group ( func1, exprA, exprB, exprC );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, Object exprB, ReqlFunction1 func1A )
                        {
                           return Group ( func1, exprA, exprB, func1A );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A )
                        {
                           return Group ( func1, exprA, func1A );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, Object exprB )
                        {
                           return Group ( func1, exprA, func1A, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, Object exprA, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Group ( func1, exprA, func1A, func1B );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A )
                        {
                           return Group ( func1, func1A );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA )
                        {
                           return Group ( func1, func1A, exprA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, Object exprB )
                        {
                           return Group ( func1, func1A, exprA, exprB );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, Object exprA, ReqlFunction1 func1B )
                        {
                           return Group ( func1, func1A, exprA, func1B );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B )
                        {
                           return Group ( func1, func1A, func1B );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(exprA);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, Object exprA )
                        {
                           return Group ( func1, func1A, func1B, exprA );
                        }
/// <summary>
/// <para>Takes a stream and partitions it into multiple groups based on the
/// fields or functions provided.</para>
/// </summary>
/// <example><para>Example: Group games by player.</para>
/// <code>&gt; r.table('games').group('player').run(conn, callback)
/// 
/// // Result passed to callback
/// [
///     {
///         group: "Alice",
///         reduction: [
///             {id: 5, player: "Alice", points: 7, type: "free"},
///             {id: 12, player: "Alice", points: 2, type: "free"}
///         ]
///     },
///     {
///         group: "Bob",
///         reduction: [
///             {id: 2, player: "Bob", points: 15, type: "ranked"},
///             {id: 11, player: "Bob", points: 10, type: "free"}
///         ]
///     }
/// ]
/// </code></example>
                        public Group Group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            arguments.CoerceAndAdd(func1A);
                            arguments.CoerceAndAdd(func1B);
                            arguments.CoerceAndAdd(func1C);
                            return new Group (arguments );
                        }
                        internal Group group ( ReqlFunction1 func1, ReqlFunction1 func1A, ReqlFunction1 func1B, ReqlFunction1 func1C )
                        {
                           return Group ( func1, func1A, func1B, func1C );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Sum (arguments );
                        }
                        internal Sum sum (  )
                        {
                           return Sum (  );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Sum (arguments );
                        }
                        internal Sum sum ( Javascript js )
                        {
                           return Sum ( js );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Sum (arguments );
                        }
                        internal Sum sum ( Object exprA )
                        {
                           return Sum ( exprA );
                        }
/// <summary>
/// <para>Sums all the elements of a sequence.  If called with a field name,
/// sums all the values of that field in the sequence, skipping elements
/// of the sequence that lack that field.  If called with a function,
/// calls that function on every element of the sequence and sums the
/// results, skipping elements of the sequence where that function returns
/// <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's 3 + 5 + 7?</para>
/// <code>r.expr([3, 5, 7]).sum().run(conn, callback)
/// </code></example>
                        public Sum Sum ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Sum (arguments );
                        }
                        internal Sum sum ( ReqlFunction1 func1 )
                        {
                           return Sum ( func1 );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Avg (arguments );
                        }
                        internal Avg avg (  )
                        {
                           return Avg (  );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Avg (arguments );
                        }
                        internal Avg avg ( Javascript js )
                        {
                           return Avg ( js );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Avg (arguments );
                        }
                        internal Avg avg ( Object exprA )
                        {
                           return Avg ( exprA );
                        }
/// <summary>
/// <para>Averages all the elements of a sequence.  If called with a field name,
/// averages all the values of that field in the sequence, skipping
/// elements of the sequence that lack that field.  If called with a
/// function, calls that function on every element of the sequence and
/// averages the results, skipping elements of the sequence where that
/// function returns <code>null</code> or a non-existence error.</para>
/// </summary>
/// <example><para>Example: What's the average of 3, 5, and 7?</para>
/// <code>r.expr([3, 5, 7]).avg().run(conn, callback)
/// </code></example>
                        public Avg Avg ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Avg (arguments );
                        }
                        internal Avg avg ( ReqlFunction1 func1 )
                        {
                           return Avg ( func1 );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Min (arguments );
                        }
                        internal Min min (  )
                        {
                           return Min (  );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Min (arguments );
                        }
                        internal Min min ( Javascript js )
                        {
                           return Min ( js );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Min (arguments );
                        }
                        internal Min min ( Object exprA )
                        {
                           return Min ( exprA );
                        }
/// <summary>
/// <para>Finds the minimum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the minimum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).min().run(conn, callback);
/// </code></example>
                        public Min Min ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Min (arguments );
                        }
                        internal Min min ( ReqlFunction1 func1 )
                        {
                           return Min ( func1 );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Max (arguments );
                        }
                        internal Max max (  )
                        {
                           return Max (  );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max ( Javascript js )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(js);
                            return new Max (arguments );
                        }
                        internal Max max ( Javascript js )
                        {
                           return Max ( js );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Max (arguments );
                        }
                        internal Max max ( Object exprA )
                        {
                           return Max ( exprA );
                        }
/// <summary>
/// <para>Finds the maximum element of a sequence.</para>
/// </summary>
/// <example><para>Example: Return the maximum value in the list <code>[3, 5, 7]</code>.</para>
/// <code>r.expr([3, 5, 7]).max().run(conn, callback);
/// </code></example>
                        public Max Max ( ReqlFunction1 func1 )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(func1);
                            return new Max (arguments );
                        }
                        internal Max max ( ReqlFunction1 func1 )
                        {
                           return Max ( func1 );
                        }
/// <summary>
/// <para>Splits a string into substrings.  Splits on whitespace when called
/// with no arguments.  When called with a separator, splits on that
/// separator.  When called with a separator and a maximum number of
/// splits, splits on that separator at most <code>max_splits</code> times.  (Can be
/// called with <code>null</code> as the separator if you want to split on whitespace
/// while still specifying <code>max_splits</code>.)</para>
/// </summary>
/// <example><para>Example: Split on whitespace.</para>
/// <code>r.expr("foo  bar bax").split().run(conn, callback)
/// </code>
/// <para>Result:</para>
/// <code>["foo", "bar", "bax"]
/// </code></example>
                        public Split Split (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Split (arguments );
                        }
                        internal Split split (  )
                        {
                           return Split (  );
                        }
/// <summary>
/// <para>Splits a string into substrings.  Splits on whitespace when called
/// with no arguments.  When called with a separator, splits on that
/// separator.  When called with a separator and a maximum number of
/// splits, splits on that separator at most <code>max_splits</code> times.  (Can be
/// called with <code>null</code> as the separator if you want to split on whitespace
/// while still specifying <code>max_splits</code>.)</para>
/// </summary>
/// <example><para>Example: Split on whitespace.</para>
/// <code>r.expr("foo  bar bax").split().run(conn, callback)
/// </code>
/// <para>Result:</para>
/// <code>["foo", "bar", "bax"]
/// </code></example>
                        public Split Split ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Split (arguments );
                        }
                        internal Split split ( Object exprA )
                        {
                           return Split ( exprA );
                        }
/// <summary>
/// <para>Splits a string into substrings.  Splits on whitespace when called
/// with no arguments.  When called with a separator, splits on that
/// separator.  When called with a separator and a maximum number of
/// splits, splits on that separator at most <code>max_splits</code> times.  (Can be
/// called with <code>null</code> as the separator if you want to split on whitespace
/// while still specifying <code>max_splits</code>.)</para>
/// </summary>
/// <example><para>Example: Split on whitespace.</para>
/// <code>r.expr("foo  bar bax").split().run(conn, callback)
/// </code>
/// <para>Result:</para>
/// <code>["foo", "bar", "bax"]
/// </code></example>
                        public Split Split ( Object exprA, Object exprB )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            arguments.CoerceAndAdd(exprB);
                            return new Split (arguments );
                        }
                        internal Split split ( Object exprA, Object exprB )
                        {
                           return Split ( exprA, exprB );
                        }
/// <summary>
/// <para>Takes a grouped stream or grouped data and turns it into an array of
/// objects representing the groups.  Any commands chained after <code>ungroup</code>
/// will operate on this array, rather than operating on each group
/// individually.  This is useful if you want to e.g. order the groups by
/// the value of their reduction.</para>
/// </summary>
/// <example><para>Example: What is the maximum number of points scored by each
/// player, with the highest scorers first?</para>
/// <code>r.table('games')
///    .group('player').max('points')('points')
///    .ungroup().orderBy(r.desc('reduction')).run(conn, callback)
/// </code></example>
                        public Ungroup Ungroup (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Ungroup (arguments );
                        }
                        internal Ungroup ungroup (  )
                        {
                           return Ungroup (  );
                        }
/// <summary>
/// <para>Turn a query into a changefeed, an infinite stream of objects representing changes to the query's results as they occur. A changefeed may return changes to a table or an individual document (a "point" changefeed). Commands such as <code>filter</code> or <code>map</code> may be used before the <code>changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code>changes</code>.</para>
/// </summary>
/// <example><para>Example: Subscribe to the changes on a table.</para>
/// <para>Start monitoring the changefeed in one client:</para>
/// <code>r.table('games').changes().run(conn, function(err, cursor) {
///   cursor.each(console.log);
/// });
/// </code>
/// <para>As these queries are performed in a second client, the first
/// client would receive and print the following objects:</para>
/// <code>&gt; r.table('games').insert({id: 1}).run(conn, callback);
/// {old_val: null, new_val: {id: 1}}
/// 
/// &gt; r.table('games').get(1).update({player1: 'Bob'}).run(conn, callback);
/// {old_val: {id: 1}, new_val: {id: 1, player1: 'Bob'}}
/// 
/// &gt; r.table('games').get(1).replace({id: 1, player1: 'Bob', player2: 'Alice'}).run(conn, callback);
/// {old_val: {id: 1, player1: 'Bob'},
///  new_val: {id: 1, player1: 'Bob', player2: 'Alice'}}
/// 
/// &gt; r.table('games').get(1).delete().run(conn, callback)
/// {old_val: {id: 1, player1: 'Bob', player2: 'Alice'}, new_val: null}
/// 
/// &gt; r.tableDrop('games').run(conn, callback);
/// ReqlRuntimeError: Changefeed aborted (table unavailable)
/// </code></example>
                        public Changes Changes (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Changes (arguments );
                        }
                        internal Changes changes (  )
                        {
                           return Changes (  );
                        }
/// <summary>
/// <para>Convert a ReQL geometry object to a <a href="http://geojson.org">GeoJSON</a> object.</para>
/// </summary>
/// <example><para>Example: Convert a ReQL geometry object to a GeoJSON object.</para>
/// <code>r.table('geo').get('sfo')('location').toGeojson.run(conn, callback);
/// // result passed to callback
/// {
///     'type': 'Point',
///     'coordinates': [ -122.423246, 37.779388 ]
/// }
/// </code></example>
                        public ToGeojson ToGeojson (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new ToGeojson (arguments );
                        }
                        internal ToGeojson toGeojson (  )
                        {
                           return ToGeojson (  );
                        }
/// <summary>
/// <para>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</para>
/// </summary>
/// <example><para>Example: Compute the distance between two points on the Earth in kilometers.</para>
/// <code>var point1 = r.point(-122.423246,37.779388);
/// var point2 = r.point(-117.220406,32.719464);
/// r.distance(point1, point2, {unit: 'km'}).run(conn, callback);
/// // result returned to callback
/// 734.1252496021841
/// </code></example>
                        public Distance Distance ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Distance (arguments );
                        }
                        internal Distance distance ( Object exprA )
                        {
                           return Distance ( exprA );
                        }
/// <summary>
/// <para>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code>intersects</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</para>
/// </summary>
/// <example><para>Example: Is <code>point2</code> within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).intersects(point2).run(conn, callback);
/// // result returned to callback
/// true
/// </code></example>
                        public Intersects Intersects ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Intersects (arguments );
                        }
                        internal Intersects intersects ( Object exprA )
                        {
                           return Intersects ( exprA );
                        }
/// <summary>
/// <para>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code>includes</code> acts as a <a href="/api/javascript/filter">filter</a>, returning a sequence of objects from the sequence that include the argument.</para>
/// </summary>
/// <example><para>Example: Is <code>point2</code> included within a 2000-meter circle around <code>point1</code>?</para>
/// <code>var point1 = r.point(-117.220406,32.719464);
/// var point2 = r.point(-117.206201,32.725186);
/// r.circle(point1, 2000).includes(point2).run(conn, callback);
/// // result returned to callback
/// true
/// </code></example>
                        public Includes Includes ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new Includes (arguments );
                        }
                        internal Includes includes ( Object exprA )
                        {
                           return Includes ( exprA );
                        }
/// <summary>
/// <para>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code>polygon</code> will close the polygon by connecting them.</para>
/// </summary>
/// <example><para>Example: Create a line object and then convert it to a polygon.</para>
/// <code>r.table('geo').insert({
///     id: 201,
///     rectangle: r.line(
///         [-122.423246,37.779388],
///         [-122.423246,37.329898],
///         [-121.886420,37.329898],
///         [-121.886420,37.779388]
///     )
/// }).run(conn, callback);
/// 
/// r.table('geo').get(201).update({
///     rectangle: r.row('rectangle').fill()
/// }, {nonAtomic: true}).run(conn, callback);
/// </code></example>
                        public Fill Fill (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Fill (arguments );
                        }
                        internal Fill fill (  )
                        {
                           return Fill (  );
                        }
/// <summary>
/// <para>Use <code>polygon2</code> to "punch out" a hole in <code>polygon1</code>. <code>polygon2</code> must be completely contained within <code>polygon1</code> and must have no holes itself (it must not be the output of <code>polygonSub</code> itself).</para>
/// </summary>
/// <example><para>Example: Define a polygon with a hole punched in it.</para>
/// <code>var outerPolygon = r.polygon(
///     [-122.4,37.7],
///     [-122.4,37.3],
///     [-121.8,37.3],
///     [-121.8,37.7]
/// );
/// var innerPolygon = r.polygon(
///     [-122.3,37.4],
///     [-122.3,37.6],
///     [-122.0,37.6],
///     [-122.0,37.4]
/// );
/// outerPolygon.polygonSub(innerPolygon).run(conn, callback);
/// </code></example>
                        public PolygonSub PolygonSub ( Object exprA )
                        {
                            Arguments arguments = new Arguments(this);
                            arguments.CoerceAndAdd(exprA);
                            return new PolygonSub (arguments );
                        }
                        internal PolygonSub polygonSub ( Object exprA )
                        {
                           return PolygonSub ( exprA );
                        }
/// <summary>
/// <para>Return an array containing all of an object's values. <code>values()</code> guarantees the values will come out in the same order as <a href="/api/javascript/keys">keys</a>.</para>
/// </summary>
/// <example><para>Example: Get all of the values from a table row.</para>
/// <code>// row: { id: 1, mail: "fred@example.com", name: "fred" }
/// 
/// r.table('users').get(1).values().run(conn, callback);
/// // Result passed to callback
/// [ 1, "fred@example.com", "fred" ]
/// </code></example>
                        public Values Values (  )
                        {
                            Arguments arguments = new Arguments(this);
                            return new Values (arguments );
                        }
                        internal Values values (  )
                        {
                           return Values (  );
                        }

    
    }
}
