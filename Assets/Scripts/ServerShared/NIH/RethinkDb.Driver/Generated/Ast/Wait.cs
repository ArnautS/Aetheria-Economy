














//AUTOGENERATED, DO NOTMODIFY.
//Do not edit this file directly.

#pragma warning disable 1591 // Missing XML comment for publicly visible type or member
// ReSharper disable CheckNamespace

using System;
using RethinkDb.Driver.Ast;
using RethinkDb.Driver.Model;
using RethinkDb.Driver.Proto;
using System.Collections;
using System.Collections.Generic;


namespace RethinkDb.Driver.Ast {

    public partial class Wait : ReqlExpr {

    
    
    
/// <summary>
/// <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
/// </summary>
/// <example><para>Example: Wait on a table to be ready.</para>
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// // Result passed to callback
/// { "ready": 1 }
/// </code></example>
        public Wait (object arg) : this(new Arguments(arg), null) {
        }
/// <summary>
/// <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
/// </summary>
/// <example><para>Example: Wait on a table to be ready.</para>
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// // Result passed to callback
/// { "ready": 1 }
/// </code></example>
        public Wait (Arguments args) : this(args, null) {
        }
/// <summary>
/// <para>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code>wait</code> command blocks until the given table (or database) is fully up to date.</para>
/// </summary>
/// <example><para>Example: Wait on a table to be ready.</para>
/// <code>&gt; r.table('superheroes').wait().run(conn, callback);
/// // Result passed to callback
/// { "ready": 1 }
/// </code></example>
        public Wait (Arguments args, OptArgs optargs)
         : base(TermType.WAIT, args, optargs) {
        }


    



    
///<summary>
/// "wait_for": "E_STATUS",
///  "timeout": "T_NUM"
///</summary>
        public Wait this[object optArgs] {
            get
            {
                var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
        
                return new Wait (this.Args, newOptArgs);
            }
        }
        
///<summary>
/// "wait_for": "E_STATUS",
///  "timeout": "T_NUM"
///</summary>
    public Wait this[OptArgs optArgs] {
        get
        {
            var newOptArgs = OptArgs.FromMap(this.OptArgs).With(optArgs);
    
            return new Wait (this.Args, newOptArgs);
        }
    }
    
///<summary>
/// "wait_for": "E_STATUS",
///  "timeout": "T_NUM"
///</summary>
        public Wait OptArg(string key, object val){
            
            var newOptArgs = OptArgs.FromMap(this.OptArgs).With(key, val);
        
            return new Wait (this.Args, newOptArgs);
        }
        internal Wait optArg(string key, object val){
        
            return this.OptArg(key, val);
        }


    

    
        /// <summary>
        /// Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.
        /// </summary>
        /// <param name="bracket"></param>
        public new Bracket this[string bracket] => base[bracket];
        
        /// <summary>
        /// Get the nth element of a sequence, counting from zero. If the argument is negative, count from the last element.
        /// </summary>
        /// <param name="bracket"></param>
        /// <returns></returns>
        public new Bracket this[int bracket] => base[bracket];


    

    


    
    }
}
